<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - lyer's blog</title><link>/posts/</link><description>所有文章 | lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Sun, 11 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/posts/" rel="self" type="application/rss+xml"/><item><title>算法和数据结构</title><link>/2021/07/11/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/07/11/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>TODO</description></item><item><title>计算机网络</title><link>/2021/07/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/07/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid><description>TODO</description></item><item><title>记实习第一次来杭州</title><link>/2021/07/11/%E8%AE%B0%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%9D%A5%E6%9D%AD%E5%B7%9E/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/07/11/%E8%AE%B0%E5%AE%9E%E4%B9%A0%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%9D%A5%E6%9D%AD%E5%B7%9E/</guid><description>TODO</description></item><item><title>iptables总结</title><link>/2021/06/19/iptables%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/19/iptables%E6%80%BB%E7%BB%93/</guid><description>iptables命令格式 iptables命令格式
iptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 控制类型] 不加-t指定表名则默认操作的是filter表 不加指定的链名则会展示表的所有的链规则 ​
四表和五链和数据流向 注意，在OUTPUT之后会通过route表进行路由选择，选择出口的网卡
iptables匹配规则如下，按规则的排列顺序逐一匹配，只要匹配到了就不会再继续往下匹配，就传递给下一个链了，所以我们需要将优先级更高的规则防止在前面
​
查看iptables 查看主要是使用-L命令，表示list的意思
查看nat表的OUTPUT链规则
iptables -t nat -nvL OUTPUT n不解析域名，直接显示IP v显示详细信息 L 表示list展示的意思 一般都会加上-nvL来查看iptables规则
查看filter表的OUTPUT规则
iptables -nvL OUTPUT ​
编写iptables规则 -A命令添加iptables规则
-j后面加控制类型
filter主要有如下控制类型
控制类型 解释 ACCEPT 允许传递数据包 DROP 丢弃数据包，不响应 REJECT 拒绝数据包，响应RST LOG 在/var/log/messages文件中记录日志信息，然后再继续传递 iptables -A INPUT -j DROP #丢弃所有数据包 iptables -A INPUT -j ACCEPT #接受所有数据包 -I表示插入iptables规则，插入到指定的行，原来的行后移</description></item><item><title>Linux静态路由表</title><link>/2021/06/17/linux%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E8%A1%A8/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/17/linux%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E8%A1%A8/</guid><description>查看路由表 route -n netstat -rn Destination是0.0.0.0表示是默认路由，只有其他路由都匹配不到时才会走这个路由
Gateway为0.0.0.0表示没有网关，静态路由表中的网关只能配置一个，配置多个则只会使用其中一个
​
路由转发流程 工具目标IP个子网掩码匹配静态路由表中的条目 如果匹配到了则将数据包发送到路由表项对应的网卡上 如果路由表项都匹配不成功则走默认路由，也就是Destinaion为0.0.0.0的路由表项，因为默认路由配置了网关所以数据包会从网关发送出去，而在局域网内的通讯则不会走网关 比如我现在要访问172.17.0.10，则会匹配到docker0这个虚拟网桥，然后将数据包转发到docker0中由docker0进行转发
如果我现在要访问192.168.0.10，则会匹配到192.168.0.0这个条目走wlp0s20f3网络接口，这个网络接口是wifi，则会直接发送数据包到wifi猫中，因为是局域网地址所以不会通过网关转发到外网，直接转发到局域网内的目标主机中
如果我现在要访问121.196.169.248，则全部匹配不到会走默认路由，直接转发到网关上然后再转发到外网
​
route命令 route -n route add default gw 10.0.0.1 dev eth0 #指定默认路由 并且设置网关和出口设备 route add -net 10.2.0.0/24 dev eth1 #指定其它路由 route del -net 10.0.0.0/24 #删除路由 ​
参考 掌握Linux路由这一篇就够了！</description></item><item><title>Nginx导论</title><link>/2021/06/10/nginx%E5%AF%BC%E8%AE%BA/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/10/nginx%E5%AF%BC%E8%AE%BA/</guid><description><![CDATA[Nginx命令 nginx #默认配置启动 nginx -c /etc/nginx.conf #指定配置文件启动 nginx -s reload #重载配置,热重启 kill -s SIGHUB &lt;pid&gt; nginx -s stop #关闭 kill -s SIGINT/SIGTERM &lt;pid&gt; nginx -s quit #优雅关闭 kill -s SIGQUIT &lt;pid&gt;  nginx -s reopen #重新打开日志文件(切割日志) nginx -t #检查默认配置文件语法是否正确 nginx -t -c /etc/nginx.conf #指定配置文件路径 ​
Location匹配规则  寻找精确匹配，匹配成功则返回 精确匹配不成功则匹配非正则的，进行最长匹配(和顺序无关)，如果最长匹配以^~开头则返回 第二步匹配不到则进行正则匹配，正则匹配和配置文件的顺序有关，如果前面的正则匹配成功则会立即返回 正则匹配不成功则继续进行第二步的最长匹配并且返回  匹配的修饰符，对于正则匹配，是一定要加的
^~ 开头匹配 用于不含正则表达式的前缀路径 ~ 大小写敏感 ~* 忽略大小写 ! 反向匹配，！后面可以连接以上的规则 案例一
#访问/a/b/c 返回2 location /a/b/c { return 200 &#34;1&#34;; } location ~ ^/a{ return 200 &#34;2&#34;; } 案例二]]></description></item><item><title>打包一个最小的Go镜像</title><link>/2021/06/10/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/10/%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</guid><description>概览 bridge 虚拟网桥模式 host 宿主机共享模式 none 无网络模式 container 容器共享模式 ​
bridge网桥模式 docker网络使用Linux提供的veth pair和virtual bridge技术来实现网桥模式
在该模式下每个容器都有一个独立的局域网虚拟IP，通讯范围如下:
跨网段的两个容器即使是在同一台宿主机上也不可以互通 （为什么？） 容器和宿主机可以互通 容器可以连接外界网络，外界网络连接容器的服务需要进行端口映射 创建虚拟网桥
docker network create -d bridge --subnet 192.168.25.0/24 --gateway 192.168.25.1 mynetwork 创建容器，指定网络
docker run -d --name pingip --net mynetwork biningo/pingip 如果想让外网访问容器的服务，可以指定端口映射，这样外网直接访问宿主机的端口就可以访问容器的服务了
docker run -d --name pingip --net mynetwork -p 8080:9090 biningo/pingip docker-proxy进程负责进行内网穿透，物理网卡上对应映射端口的流量会转发到docker-proxy进程上，然后docker-proxy再转发到容器内，容器内响应数据包也见过docker-proxy进行转发到物理网卡对应的端口中
如果容器想要访问外网则必须进过iptables的NAT网络地址转换才可以访问外网
在自定义的网络中是可以直接通过容器名进行访问的，而在docker0网络下则只能通过IP进行访问同网段的主机
​
host宿主机共享模式 docker run --name busybox -it --net host busybox:1.32.0 sh 进入容器执行ifconfig命令可以看到和宿主机上的网络一模一样，容器没有自己的IP，外界直接访问宿主机即可访问容器的服务</description></item><item><title>打包一个最小的Go镜像</title><link>/2021/06/10/%E6%89%93%E5%8C%85%E4%B8%80%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84go%E9%95%9C%E5%83%8F/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/10/%E6%89%93%E5%8C%85%E4%B8%80%E4%B8%AA%E6%9C%80%E5%B0%8F%E7%9A%84go%E9%95%9C%E5%83%8F/</guid><description><![CDATA[此Dockerfile来源: https://github.com/new-go/port-scan
 FROMgolang:1.16-alpine3.13 as builder ENV GOPROXY=https://goproxy.ioWORKDIR/buildADD . /build/RUN CGO_ENABLED=0 go build -a -ldflags &#34;-s -w&#34; -o pscan /build/FROMscratchCOPY --from=builder /build/pscan /ENTRYPOINT [&#34;/pscan&#34;]CGO_ENABLED=0表示不使用cgo，可以编译为一个纯静态的二进制文件，这样就不需要依赖其他动态加载库了，方便部署到Docker中
-ldflags表示链接的一些参数，-s 的作用是去掉符号信息，-w的作用是去掉调试信息，这样可以最大程度减少镜像的体积
-a 强制重新构建]]></description></item><item><title>awk工具</title><link>/2021/06/05/awk%E5%B7%A5%E5%85%B7/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/05/awk%E5%B7%A5%E5%85%B7/</guid><description><![CDATA[awk和sed区别 他们都是Linux下的 流处理工具
 awk核心是格式化 sed 核心是 正则  ​
print输出和格式化 BEGIN { username=&#34;lyer&#34; age=18 OFS=&#34;-&#34; #指定print分割符号，默认是\t print &#34;hello,&#34;,&#34;world&#34; print &#34;I&#39;m&#34;,username,age print &#34;a&#34;,&#34;b&#34;,&#34;c&#34; } # -16 不足的往右边填空格 # 16 不足的往左边填空格 { #printf &#34;%-16s %-16s %-16s\n&#34;,$1,$2,$3 printf &#34;%16s %16s %16s\n&#34;,$1,$2,$3 } END{ a = sprintf(&#34;%16s %16s&#34;,&#34;hello&#34;,&#34;world&#34;) print a } ​
NR输出行 输出第1行
awk &#39;NR==1&#39; net.txt 输出[1,4]行
awk &#39;NR==1,NR==4&#39; net.txt awk &#39;NR&gt;=1 &amp;&amp; NR&lt;=4&#39; net.txt 输出行号，$0表示整行数据
awk &#39;NR==1,NR==5 {print NR,$0}&#39; net.txt 范围打印，打印前n行]]></description></item><item><title>git三大区域和远程仓库</title><link>/2021/06/05/git%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F%E5%92%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/05/git%E4%B8%89%E5%A4%A7%E5%8C%BA%E5%9F%9F%E5%92%8C%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</guid><description><![CDATA[git三大区域 ​
工作区 工作区就是我们的本地目录
​
暂存区 暂存区用于暂时存放我们工作区域的更改，比如我们工作区域修改了一个文件，此时就可以先放入暂存区
然后我继续修改这个文件&hellip;&hellip;
改完之后我突然觉得文件这样修改不是很好，还是原来的比较好，想要恢复回原来的样子，此时暂存区就发挥作用了
我们可以将暂存区域的文件覆盖回工作区域，这样就又回到上次暂存的样子了，恢复之后此时暂存区的内容又和工作区域一致了
git add a.txt git restore a.txt #将上次暂存的文件覆盖到工作区 git restore --staged a.txt #取消暂存 也就是清空暂存区 ​
本地仓库 如果确保此次修改就是最终版本，那么我们可以将暂存区域中的内容提交到本地仓库。此时暂存区的内容就被提交为一个版本，暂存区中的内容也会被清空
一次提交就相当于一次版本的发布，所有人都可以看到此版本所做的变更，并且以后可以回退到此版本
git commit a.txt -m &#34;new a&#34; git reset --hard HEAD^ #回退 git reset a112c #回退到特定的版本号 ​
三大区域变更 暂存区-&gt;工作区
git restore #将暂存区文件恢复到工作区 git restore --staged #取消暂存 git rm #直接删除暂存区和本地文件 git mv #同时修改暂存区和工作区的文件 版本库-&gt;工作区
#将工作区代码回滚到指定版本,此时暂存区内容也会清空 git reset &lt;版本号&gt; #可以通过HEAD来指定 HEAD表示当前版本 HEAD^上一个版本 HEAD^^上上个版本.... git reset --hard HEAD git reset --hard HEAD^ #~指定版本 假设v1 v2 v3 v4 v5 则现在HEAD在v5 命令之后:HEAD=v3 git reset --hard HEAD~2 #可以所有的版本号 以便回到过去还可以回到将来 git reflog ​]]></description></item></channel></rss>