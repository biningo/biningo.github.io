<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>计组和计算机基础 - 分类 - lyer's blog</title><link>/categories/%E8%AE%A1%E7%BB%84%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link><description>计组和计算机基础 - 分类 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Sat, 24 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E8%AE%A1%E7%BB%84%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/" rel="self" type="application/rss+xml"/><item><title>内存对齐</title><link>/2021/04/24/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link><pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/24/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid><description>计算机总线中有一个 数据总线，用来传输内存上的数据到寄存器中，数据总线大小决定了一次能传输多个数据，比如32位总线一次能传输4字节，字长就是4字节，如果需要取一个8字节的数据就需要传输两次，64位总线一次能传输8字节，字长就是8字节，取一个8字节的数据只需要一次传输即可，所以CPU取数据都是以数据总线宽度(也就是CPU字长)为单位来取的
内存对齐就是为了提高CPU获取数据的效率，如果不进行内存对齐可能会增加CPU访问数据的次数
|a|a|a|b|b|b| | | #对齐前 |a|a|a| |b|b|b| | #对齐后 比如a、b各自占用3byte，CPU字长为4byte，不进行内存对齐而采用紧凑的方式存储那么访问a只需要一次，但是访问b就需要进行两次
并且一个struct的起始地址也是需要从CPU字长的整数倍开始的，同时如果一个struct的长度不足自身内存对齐边界(属性中长度最长的那个)的整数倍则会进行填充，这是为了在数组中保持struct依然是内存对齐的
因为struct会进行内存对齐，所以我们需要合理的布局struct中各个属性的分布，这样才能有效的减少内存大小
type A struct { a int8 b int16 c int32 } type B struct { a int8 c int32 b int16 } type C struct { a int32 c int64 b int8 } type D struct { c int64 a int32 b int8 } func main() { fmt.Println(unsafe.Sizeof(A{})) // 8 fmt.Println(unsafe.Sizeof(B{})) // 12 fmt.Println(unsafe.Sizeof(C{})) // 24 fmt.</description></item><item><title>Cache高速缓存</title><link>/2021/04/07/cache%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/07/cache%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98/</guid><description>Cache和内存地址映射 1、直接相联映射 内存指定的块只能缓存到指定的Cache行中，采用mod的方式，并且块号用中间的位数，这样主要是为了能利用局部性原理将附近的几个块都能够有机会同时缓存起来
缺点是缓存利用率底，指定的块只能对应指定的行，如果对应的缓存行慢了，即时其他缓存行空着也无法缓存，需要将自己对应的缓存行的数据置换出去
2、全相联映射 内存每块都可以映射到Cache的每一行，优点是缓存利用率高，缺点是查找缓存效率低，需要遍历查找是否存在与缓存中
3、组相联映射 直接映射+全相联映射的结合，将多块分为一组，同时将缓存行里面的多行分为一组，每组内采用全相联映射，组间采用直接相联映射
​
Cache数据读取和写入 读命中和读不命中 CPU拿到真实的内存地址之后需要先检查Cache是否命中，如果命中则直接返回否则需要向下一级Cache加载数据，如果下一级也没有命中则需要直接访问内存，访问内存的时候通常会根据局部性原理预读一些数据到各级缓存中
写命中 写数据的时候如果Cache命中了，则我们需要考虑多级缓存以及和内存同步问题，因为L3缓存、内存等都是多核共享的，如果不能及时将脏数据更新回L3或则内存则会造成数据不一致问题，通常有下面两种处理方式:
Write Through 直写
如果写命中，则直接同时跟新当前Cache以及下一级Cache、内存等，这种方式能很好的保障数据一致性，但是会引起总线流量过大，每次写都需要立即更新
Write Back 写回
如果写命中则不会立即更新下一级缓存或则内存，而是标记位dirty ，等到此缓存行被替换的时候再写回，此策略的缺点就是无法保障数据一致性，优点就是可以减少总线流量
写不命中 写数据如果没有命中Cache，则也会有如下几个策略:
Write Allocate 写分配
首先加载对应的数据到缓存行中，然后往缓存里面写入，此策略通常和 Write Back 配套
Not Write Allocate 非写分配
避开高速缓存，直接操作内存，此策略通常是与 Write Through 配套
综上: 我们得出，Cache一致性问题有两种策略解决 (命中和不命中两种情况对应的策略)
Write Through+Not Write Allocate Write Back + Write Allocate ​
Cache分级 L1缓存分为两种: 指令缓存和数据缓存</description></item><item><title>信息的编码和表示</title><link>/2021/02/01/%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%A1%A8%E7%A4%BA/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/01/%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E8%A1%A8%E7%A4%BA/</guid><description><![CDATA[跟新中&hellip;..
 二进制算术运算 二进制的 加减乘除 运算和十进制相似，只不过二进制到2就需要进位，而十进制到10才需要进位而已，其他进制也都类似。
CPU逻辑运算：&amp; | ^(异或) ~(取反) （由相应的与非门等电路组合而成）
CPU算术运算： 加法、位移 （通过上面的逻辑运算实现）
二进制的加减乘除都是通过 加法、位移 组合来实现的，CPU里面实现二进制的算术运算由相应的部件来实现：
 加法器（全加器） 实现加法 除法器、乘法器 实现乘除  1、二进制加减 二进制加法：01+01=10 第一位1+1=0然后需要进位并且需要链式进位，这和十进制一样，加法器基本原理就是：
 异或（不带进位的加法1+1=0 0+0=0） 与 （计算进位,只有1|1==1才会产生进位）如果有进位还必须保存进位参与下一次运算  二进制里面的减法是通过加法来运算的，减去一个数其实就是加上这个数的负数，计算机为了表示负数，会出现很多问题，原码、反码、补码就是为了解决负数问题的（稍后讨论）
二进制加法规则：0+0=0 1+0=1 1+1=1
二进制减法规则：0-0=0 1-0=1 0-1=1(需要向前借位) 1-1=0
可以看到和十进制一样，只不过十进制有10种状态0-9而二进制只有0-1两种状态
弄清楚二进制运算只需要转变以前10进制运算观念即可
2、二进制乘除 二进制乘法比十进制还简单，运算规则和十进制一样，下面截取**《编码》**里的一张图片说明：
第一排1101叫被被乘数，第二排1011叫乘数
为了更直观感受，将每次乘下来的结果空白部分都补0：
00001101 00011010 00000000 01101000 -------- 10001111 CPU乘法器：有3个寄存器组成：
 A：保存被乘数 B：保存乘数 C：保存结果  下面展示完整流程（假设在8位机器上）：
A：00001101 B：00001011 C：00000000
 1*00001101=00001101=&gt; A：00011010 B：00000101 C：00001101 1*00011010=00011010=&gt; A：00110100 B：00000010 C：00001101 0*00110100=00000000=&gt; A：01101000 B：00000001 C：01101000 1*01101000=01101000=&gt; A：11010000 B：00000000C：10001111  所以最终结果就是 10001111]]></description></item></channel></rss>