<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on lyer's blog</title><link>/categories/linux/</link><description>Recent content in Linux on lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Fri, 19 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Shell脚本基本语法总结</title><link>/2021/03/19/shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><author>icepan@aliyun.com (lyer)</author><guid>/2021/03/19/shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description>变量 变量类型分为:
全局 (declare或则直接写) 局部(函数内部) local声明 环境变量 只读变量
readonly name=&amp;#34;AAA&amp;#34; #之后再次赋值会报错 #只读变量也可以后来才设置 name=&amp;#34;BBB&amp;#34; readonly name 删除变量 (只读变量不能删除)
name=&amp;#34;AA&amp;#34; unset name if [ -z $name ];then echo &amp;#34;null&amp;#34; else echo &amp;#34;${name}&amp;#34; fi 特殊变量有如下几个类型:
量 含义 $0 当前脚本的文件名 $&amp;lt;n&amp;gt; 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。 $# 传递给脚本或函数的参数个数。 $* 传递给脚本或函数的所有参数。 $@ 传递给脚本或函数的所有参数。被双引号&amp;quot;&amp;quot;包含时，与 $* 稍有不同 $? 上个命令的退出状态，或函数的返回值，用于判断上一个函数或则命令是否执行成功 $$ 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。 ${@}和${*} 的区别</description></item><item><title>Linux常用命令总结</title><link>/2021/02/23/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate><author>icepan@aliyun.com (lyer)</author><guid>/2021/02/23/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</guid><description>持续跟新&amp;hellip;..
进程相关 进程的信息都在/proc下
ps ps 显示系统进程
ps -ef ps -aux ps -ef | grep sshd jobs fg bg &amp;amp; nohub &amp;amp; jobs fg bg nohub
./exe &amp;amp; #后台运行 ./exe &amp;gt; log.txt 2&amp;gt;&amp;amp;1 &amp;amp; #0:标准输入 1:标准输出 2:标准错误 2&amp;gt;&amp;amp;1是将标准出错重定向到标准输出 最终结果就是`标准输出`和`错误`都被重定向到`log.txt`中 etcd &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp; #后台运行 同时输出日志重定向到垃圾桶 nohup etcd &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp; #以守护进程方式运行 不会随着终端退出而退出 jobs #查看后台运行中的进程 #ctrl+z暂停任务 ctrl+c终止任务 fg 1 #将后台任务放到前台执行 bg 1 #将一个暂停的任务放在后台执行 kill kill killall
kill -9 1111 #强制终止 killall 1111 #杀死进程 以及所有子进程 pstree pstree 显示进程树</description></item></channel></rss>