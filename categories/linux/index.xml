<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Linux - 分类 - lyer's blog</title><link>/categories/linux/</link><description>Linux - 分类 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Sat, 19 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/linux/" rel="self" type="application/rss+xml"/><item><title>iptables总结</title><link>/2021/06/19/iptables%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/19/iptables%E6%80%BB%E7%BB%93/</guid><description>iptables命令格式 iptables命令格式
iptables [-t 表名] 管理选项 [链名] [匹配条件] [-j 控制类型] 不加-t指定表名则默认操作的是filter表 不加指定的链名则会展示表的所有的链规则 ​
四表和五链和数据流向 注意，在OUTPUT之后会通过route表进行路由选择，选择出口的网卡
iptables匹配规则如下，按规则的排列顺序逐一匹配，只要匹配到了就不会再继续往下匹配，就传递给下一个链了，所以我们需要将优先级更高的规则防止在前面
​
查看iptables 查看主要是使用-L命令，表示list的意思
查看nat表的OUTPUT链规则
iptables -t nat -nvL OUTPUT n不解析域名，直接显示IP v显示详细信息 L 表示list展示的意思 一般都会加上-nvL来查看iptables规则
查看filter表的OUTPUT规则
iptables -nvL OUTPUT ​
编写iptables规则 -A命令添加iptables规则
-j后面加控制类型
filter主要有如下控制类型
控制类型 解释 ACCEPT 允许传递数据包 DROP 丢弃数据包，不响应 REJECT 拒绝数据包，响应RST LOG 在/var/log/messages文件中记录日志信息，然后再继续传递 iptables -A INPUT -j DROP #丢弃所有数据包 iptables -A INPUT -j ACCEPT #接受所有数据包 -I表示插入iptables规则，插入到指定的行，原来的行后移</description></item><item><title>Linux静态路由表</title><link>/2021/06/17/linux%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E8%A1%A8/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/17/linux%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%E8%A1%A8/</guid><description>查看路由表 route -n netstat -rn Destination是0.0.0.0表示是默认路由，只有其他路由都匹配不到时才会走这个路由
Gateway为0.0.0.0表示没有网关，静态路由表中的网关只能配置一个，配置多个则只会使用其中一个
​
路由转发流程 工具目标IP个子网掩码匹配静态路由表中的条目 如果匹配到了则将数据包发送到路由表项对应的网卡上 如果路由表项都匹配不成功则走默认路由，也就是Destinaion为0.0.0.0的路由表项，因为默认路由配置了网关所以数据包会从网关发送出去，而在局域网内的通讯则不会走网关 比如我现在要访问172.17.0.10，则会匹配到docker0这个虚拟网桥，然后将数据包转发到docker0中由docker0进行转发
如果我现在要访问192.168.0.10，则会匹配到192.168.0.0这个条目走wlp0s20f3网络接口，这个网络接口是wifi，则会直接发送数据包到wifi猫中，因为是局域网地址所以不会通过网关转发到外网，直接转发到局域网内的目标主机中
如果我现在要访问121.196.169.248，则全部匹配不到会走默认路由，直接转发到网关上然后再转发到外网
​
route命令 route -n route add default gw 10.0.0.1 dev eth0 #指定默认路由 并且设置网关和出口设备 route add -net 10.2.0.0/24 dev eth1 #指定其它路由 route del -net 10.0.0.0/24 #删除路由 ​
参考 掌握Linux路由这一篇就够了！</description></item><item><title>awk工具</title><link>/2021/06/05/awk%E5%B7%A5%E5%85%B7/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/05/awk%E5%B7%A5%E5%85%B7/</guid><description><![CDATA[awk和sed区别 他们都是Linux下的 流处理工具
 awk核心是格式化 sed 核心是 正则  ​
print输出和格式化 BEGIN { username=&#34;lyer&#34; age=18 OFS=&#34;-&#34; #指定print分割符号，默认是\t print &#34;hello,&#34;,&#34;world&#34; print &#34;I&#39;m&#34;,username,age print &#34;a&#34;,&#34;b&#34;,&#34;c&#34; } # -16 不足的往右边填空格 # 16 不足的往左边填空格 { #printf &#34;%-16s %-16s %-16s\n&#34;,$1,$2,$3 printf &#34;%16s %16s %16s\n&#34;,$1,$2,$3 } END{ a = sprintf(&#34;%16s %16s&#34;,&#34;hello&#34;,&#34;world&#34;) print a } ​
NR输出行 输出第1行
awk &#39;NR==1&#39; net.txt 输出[1,4]行
awk &#39;NR==1,NR==4&#39; net.txt awk &#39;NR&gt;=1 &amp;&amp; NR&lt;=4&#39; net.txt 输出行号，$0表示整行数据
awk &#39;NR==1,NR==5 {print NR,$0}&#39; net.txt 范围打印，打印前n行]]></description></item><item><title>Linux权限和用户</title><link>/2021/06/03/linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</link><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/03/linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90/</guid><description>用户和用户组 一个用户必须属于某个组，创建新用户的时候如果没有指定用户组则会创建一个同名的默认用户组
用户组和用户的关系是多对多的关系，一个组里可以有多个用户，同理一个用户也可以属于多个用户组，但是每个用户都会有一个默认组，而其他组则是附加组在/etc/passwd文件中记录的用户组就是用户所属的默认组，而在/etc/group中会记录每个用户组里面的其它用户成员列表(用户组的主成员不记录在此)
/etc/passwd记录的是用户相关的一些信息，每个用户占用一行
用户名:口令(都为x):用户ID:用户组ID:用户注释:用户家目录:shell解释器 testuser:x:1001:1001:TmpUser:/home/testuser:/bin/sh /etc/group记录的是用户组相关的信息，每个用户组占一行
组名:口令(都为x):用户组ID:组内用户列表 audio:x:29:pulse,pb #主用户不会记录在这里 /etc/shadow 记录的是用户加密之后的密码信息
/etc/default/useradd 新用户默认设置的配置文件
SHELL=/bin/sh #新用户的默认shell EXPIRE=2020/06/08 #新用户的默认过期时间 不配置则永久 .... ​
用户和用户组相关的Linux命令 我们直接修改配置文件也是可以的，但是Linux也为我们提供了一些命令，本质上都是修改底层的配置文件
新建/删除/修改用户
useradd/userdel/usermod 用户组增删改
groupadd/groupdel/groupmod 修改用户密码
passwd 为用户添加到指定的组中 (直接修改/etc/group命令也可)
#添加用户到指定的用户组中 不加-a则表示替换 #这里需要注意: 用户的默认组是不会被修改掉的 这个操作只能修改附加组 usermod -a -G g1,g2,g3 查看用户信息
id/who/users/whoami/last/lastb/groups ​
sudo命令和sudoers配置 sudo的作用是一个用户借用其它用户的权限来执行相关命令，需要配置/etc/sudoers文件，Linux会判断是否符合sudo文件的配置才会决定是否能够借权
用户名 主机=(用户:用户组) NOPASSWD:命令列表 #pb用户可以在 所有主机登入 执行 所有用户:所有组 的所有命令 并且不需要输入密码 pb ALL=(ALL:ALL) NOPASSWD:ALL #表示admin组内的用户规则 %admin ALL=(ALL:ALL) ALL 下面再来看几个案例
#相当于(root:root) peter ALL=(root) NOPASSWD: ALL lucy ALL=(ALL) chown,chmod,useradd papi ALL=/usr/sbin/*,/sbin/*,!</description></item><item><title>Shell脚本基本语法总结</title><link>/2021/03/19/shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/19/shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description><![CDATA[基本语法 如果一行命令太长的话可以加\来分割多行命令
echo hello\ world 如果需要一行执行多条shell语句，则可以使用;分割，不管语句执行失败成功与否都会执行所有的语句
echo hello; ls -al ; echo ok || 命令执行成功则不再继续执行
cd /abc || echo &#34;dir is not exist&#34; &amp;&amp; 命令执行成功才会继续执行
cd /etc &amp;&amp; ls ​
快捷键 ctrl+a #光标到行首 ctrl+f #方向键-&gt; ctrl+b #方向键&lt;- ctrl+e #光标到行尾 ctrl+u #剪切光标到行首 ctrl+k #剪切光标位置到行尾 ctrl+w #删除光标前一个单词 ctrl+y #粘贴 ctrl+d #退出当前shell ctrl+z #暂停任务 bg fg可以恢复 ctrl+c #终止前台进程 ctrl+r #搜索历史命令 ctrl+p #上一条命令 ctrl+n #下一条命令 ​
模式扩展 ? * 通配符
ls ?.txt #只列出 a.txt b.]]></description></item><item><title>vim使用教程</title><link>/2021/02/21/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link><pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/21/vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid><description>光标移动(命令模式)
n+空格 #在当前行中移动n个字符 n+Enter #移动到距离当前行后n行 H/M/L #移动到屏幕第一行/中间行/最后一行 gg/G/#移动到当前文件第一行/最后一行 nG/ngg #移动到特定的第n行 w/nw #向前 移动1个单词/移动n个单词 b/nb #向后 移动1个单词/移动n个单词 0/$ #移动到行的开头/结尾 h/j/k/l #左/下/上/右 文本编辑删除复制粘贴(命令模式)
i/a/I/A #在 光标前/光标后/行首/行尾 插入文本 o/O(字母O) #在光标下/上方新开一行 x/X #命令模式下删除光标后/前的单个字符 r/R #替换字符/复写模式,连续替换 d0/d$ #删除到 行首/行尾 dgg/dG #删除到 文件头/文件尾 dd/ndd #删除该行/删除该行下的n行 yy/nyy #复制该行/n行 p/P #当前行下/上面粘贴 u/ctrl+r #撤销上次操作/撤销反悔,重做上次撤销 . #复制前一个动作 文档检索
/search_text #在文档后面的部分搜索 ?search_text #在文档前面的部分搜索 n/N #往前/后移动检索到的关键字 :noh #取消检索的高亮 :%s/abc/aaa #检索第一个 “abc” 字符串并将其替换成“aaa” :%s/abc/aaa/g #检索并将所有的“abc”,替换为“aaa” :%s/original/replacement/gc #替换前先询问 :%n1,n2s/A/B/g #在n1-n2行之间检索替换 :!command #暂时离开执行命令 :set nu #设置行号 :set nonu#取消行号 可视模式</description></item></channel></rss>