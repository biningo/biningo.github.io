<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on lyer's blog</title><link>/tags/docker/</link><description>Recent content in docker on lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Tue, 30 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>github上的docker镜像仓库</title><link>/2021/03/30/github%E4%B8%8A%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><author>icepan@aliyun.com (lyer)</author><guid>/2021/03/30/github%E4%B8%8A%E7%9A%84docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid><description>github镜像仓库 github上提供两种镜像仓库服务:
基于仓库和项目的专有docker仓库，和项目仓库关联，只有删除仓库才可以删除image 基于个人账户的独立的docker仓库，和任何项目无关，完全独立 ghcr.io #账户仓库 ghcr.io/USERNAME/IMAGE_NAME:VERSION #打标签案例 docker.pkg.github.com #具体项目仓库 docker.pkg.github.com/USERNAME/REPO_NAME/IMAGE_NAME:VERSION #打标签案例 使用github镜像仓库之前需要进行登入，登入的用户名就是github的用户名，密码就是github上创建的TOKEN，注意需要赋予package权限
echo $GITHUB_DOCKER_IMAGE_TOKEN | docker login ghcr.io -u biningo --password-stdin ​
参考 GitHub 镜像仓库服务 Ghcr 快速上手教程
Container guides for GitHub Packages【官方文档】</description></item><item><title>docker的volumes踩坑</title><link>/2021/01/07/docker%E7%9A%84volumes%E8%B8%A9%E5%9D%91/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><author>icepan@aliyun.com (lyer)</author><guid>/2021/01/07/docker%E7%9A%84volumes%E8%B8%A9%E5%9D%91/</guid><description>挂载volume的行为 volume的挂载是 以宿主机为主 ，主要有如下几个行为可能：
host container mount result 文件夹不存在，文件夹存在但为空 不管容器内文件夹是否存在 container中文件被覆盖（清空） 文件夹存在且不为空 不管容器内的文件夹是否存在 container中文件夹内容被覆盖（原内容清空， 覆盖为host上文件夹内容） 综上，应该避免挂载宿主机上一个空的或未创建的目录，这样可能会清空容器中原来存在的文件，避免将容器原来已经存在的文件覆盖(除非你的目的就是要覆盖容器内的文件)
​
将容器已经存在的文件挂载到宿主机 由上面可知，容器中原本存在的文件一旦进过挂载，就一定会被宿主机覆盖，但是有如下几个方法，可以曲线救国：
docker cp命令先将容器内的数据copy到宿主机然后再进行挂载 在docker-entrypoint.sh等脚本中执行创建文件和文件夹等相关命令，因为挂载行为先与脚本的执行行为，所以在脚本执行的时候已经挂载volume，当脚本创建相关文件的时候就可以反映到宿主机上了 ​
volume相关命令 docker volume ls #查看所有命名和匿名volume docker inspect &amp;lt;volume-name&amp;gt; #查看volume相关信息 docker volume create &amp;lt;volume-name&amp;gt; #创建volume docker volume rm &amp;lt;volume-name&amp;gt; #删除 docker volume preun #清空没有容器挂载中的volume stop中的容器的volume不会清空 #控制volume的读写权限 -v &amp;lt;xxx&amp;gt;:容器内路径:ro #只读 在容器内只能读挂载的文件 -v &amp;lt;xxx&amp;gt;:容器内路径:rw #读写 在容器内能读写挂载文件 默认 ​</description></item></channel></rss>