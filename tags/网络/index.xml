<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>网络 - 标签 - lyer's blog</title><link>/tags/%E7%BD%91%E7%BB%9C/</link><description>网络 - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Thu, 27 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E7%BD%91%E7%BB%9C/" rel="self" type="application/rss+xml"/><item><title>TCP协议中的KeepAlive机制</title><link>/2021/05/27/tcp%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84keepalive%E6%9C%BA%E5%88%B6/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/05/27/tcp%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84keepalive%E6%9C%BA%E5%88%B6/</guid><description>HTTP中的keep-alive 在HTTP的头部中，也有一个字段
connection: keep-alive 此字段告诉服务器HTTP会复用这一条TCP连接，当前的HTTP请求完毕之后不会立即断开连接，还可以被另外的HTTP请求复用这条连接，这样就可以减少建立TCP连接的次数
​
TCP的长连接和短连接 TCP连接并没有分为长短连接，长短连接只是在于你如何使用TCP
如果建立TCP连接短暂通讯结束之后立即释放这条连接则此连接就为短连接，比如我HTTP发一次请求就建立一次TCP连接，HTTP响应回来之后就立即断开TCP连接
短连接的缺点就是需要频繁的建立TCP连接，比较耗时，优点就是可以很快的释放TCP连接队列，以便于空出位置建立其他TCP连接
如果建立TCP连接在使用时候不立即断开，如果一直没有请求的话就将这条连接空闲即可，以便与后面如果还要请求通讯的话就不需要建立TCP连接了，直接复用那条已经建立好的TCP连接即可。比如我HTTP请求建立TCP连接，响应结束之后浏览器不会立即释放与服务器的TCP连接，如果下次还有其他请求的话则可以复用之前建立的TCP连接即可，如果一时半会儿还没有请求的话只需要将TCP连接空闲着即可，等下次有请求了就可以继续用这条连接进行传输
长连接的优点就是可以减少建立TCP连接的消耗，复用连接。缺点就是如果很长一段时间都没有数据可发的话就会占用操作系统的TCP全连接队列，如果TCP全连接队列比较紧张的话那么就无法建立其他的TCP连接了
​
TCP的KeepAlive机制 TCP的KeepAlive机制会在指定的间隔时间发送KeepAlive探活包，如果收到了KeepAlive包的ACK则表明对方还在，如果多次发送KeepAlive包都得不到回复则可以认为对方已经挂了，就可以将这个TCP连接从队列里面删除了
KeepAlice主要有如下几个作用:
保活 解决窗口值为0的情况 在空闲的长连接里我们可以通过KeepAlive机制探测对方是否存活，如果收到ACK则表明对方还存活并且还需要复用这条连接
如果多次发送KeepAlive都收不到则说明对方已经挂了或则对方拒绝回复，这样就表明这条长连接可以断开清除了。如果没有KeepAlive机制如果对方挂了则这个连接还会一直保留在服务区占用着TCP全连接队列
还有一种情况就是在接收方的窗口值为0的情况下，那么发送方就不能继续发送数据了，那么即使接收方的窗口扩大了也没有办法告诉发送方，此时就相当于死锁了双方都不会发送数据
所以KeepAlive探测包还可以用于解决窗口值减少为0而造成死锁的情况。当接收方的窗口为0的时候，发送方可以定时的发送KeepAlive包来探测接收方的窗口是否扩大了
​
Linux中KeepAlive相关配置 #7200 每7200s发送KeepAlive包 /proc/sys/net/ipv4/tcp_keepalive_time #75 如果75s内没有收到KeepAlive的ACK则再次发送 /proc/sys/net/ipv4/tcp_keepalive_intvl #9 如果重试9次都没有响应则把此连接删除掉 /proc/sys/net/ipv4/tcp_keepalive_probes ​
KeepAlive能携带数据吗 注意，KeepAlive包的seq也是没有意义的，seq一般和初始化的seq一致，KeepAlive是不携带数据的</description></item><item><title>netcat和socat网络小工具</title><link>/2021/05/19/netcat%E5%92%8Csocat%E7%BD%91%E7%BB%9C%E5%B0%8F%E5%B7%A5%E5%85%B7/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/05/19/netcat%E5%92%8Csocat%E7%BD%91%E7%BB%9C%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid><description>netcat网络瑞士军刀 netcat是一个网络小工具，可以用来监听端口，数据回发(简单的echo)，TCP端口扫描，探测网络，网络测速等
echo监听端口和连接端口
#server -l表示监听 nc -l 8000 #监听8000端口 #client nc localhost 8000 #连接本地的8000端口 #然后直接输入数据对方就可以收到了 #监听UDP端口 nc -u -l 8080 #请求UDP端口 nc -u localhost 8080 传输文件
#server nc -l 1234 &amp;gt; filename.out #client nc -N localhost 1234 &amp;lt; filename.in #-N表示如果接受到EOF则断开 端口扫描和检测端口
# -z表示只是检测端口 不需要发送数据 # -v表示显示详细信息 # -w表示指定超时时间s nc -zv host.example.com 20-30 #[20,30] nc -zv icepan.cloud 9000 #端口检测 telnet效果一样 nc -zv -w 5 icepan.cloud 1111 #检测端口设置超时时间为5s 结合pv网络测速（pv用于测量任何操作的数度，可以以管道符来测量）
#server nc -l 8080 &amp;lt; /dev/zero #给这个传输无限多个空白字符串 #client nc icepan.</description></item><item><title>Nginx中server_name和HTTP协议中的Host</title><link>/2021/05/19/nginx%E4%B8%ADserver_name%E5%92%8Chttp%E5%8D%8F%E8%AE%AE%E7%9A%84host/</link><pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/05/19/nginx%E4%B8%ADserver_name%E5%92%8Chttp%E5%8D%8F%E8%AE%AE%E7%9A%84host/</guid><description><![CDATA[HTTP协议中的Host HTTP请求头部有一个Host字段可以指定目标主机的域名或则主机名，但是最终域名不是需要转化为IP:Port吗？IP:Port不就是可以标识唯一应用了吗？ 那为啥HTTP请求头还需要一个Host字段来标识出域名呢？
这里涉及到 虚拟主机 的概念，即一台主机(一个IP) 可以拥有多个域名，每个域名都可以在80同端口下部署HTTP应用，客户端看访问应用则以为应用是一台独立的主机一样，但是实际上多个应用是共享同一台主机，只不过他们对应的域名不一样罢了，所以也叫虚拟主机
如果一个请求发送到服务器上的80端口，那么监听在80端口上的应用服务器会判断HTTP请求报文中的Host是不是自己的，如果是则接收并且响应，不是则丢弃。或则直接部署一个网关(Nginx)，网关捕获所有请求然后检查HTTP请求头的Host字段根据配置的 Host规则 转发到不同的后端服务器上即可
当然也可以将多个应用分别部署到不同的端口上，只是这样比较麻烦并且占用了端口，有时候还违背了一些默认规则，比如HTTP应用的默认端口80，如果我有两个网站那么我就不得不将其他网站的端口给修改了，这样会造成用户访问不方便
​
Nginx中的server_name 我们可以配置server_name规则来让Nginx检查Host字段并且转发到相应的服务器上
server { listen 80; server_name www; location / { default_type text/html; content_by_lua &#39; ngx.say(&#34;&lt;p&gt;www&lt;/p&gt;&#34;) &#39;; } } server { listen 80; server_name www.lyer.com; location / { default_type text/html; content_by_lua &#39; ngx.say(&#34;&lt;p&gt;www.lyer.com&lt;/p&gt;&#34;) &#39;; } } server { listen 80; server_name www.lyer.*; location / { default_type text/html; content_by_lua &#39; ngx.say(&#34;&lt;p&gt;www.lyer.*&lt;/p&gt;&#34;) &#39;; } } server { listen 80; server_name ~\w+.]]></description></item><item><title>Base64编码</title><link>/2021/03/02/base64%E7%BC%96%E7%A0%81/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/02/base64%E7%BC%96%E7%A0%81/</guid><description>什么是Base64编码 将二进制数据转化为64个可打印ASCII码的一种编码方式，这64个可打印字符分别为:
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/= 注意，最后一个=不算，=当做Base64编码的结尾标志
总结：基于 64 个可打印字符来表示二进制数据的表示方法
​
Base64编码原理 将待转换的字符串每3个字节分为一组，每个字节占 8 个二进制位，那么共有24个二进制位
将第（1）步得到的每 24 个二进制位分为每 6 个一组（因为2^6=64），则每 3 个字节可分为 4 组
在每组前面添加两个 0 ，补齐1字节，每组由 6 个二进制位变为 8 个二进制位，总共 32 个二进制位，即四个字节 （3字节变4字节，所以经过Base64编码的都会变大）
6个二进制位转化为十进制然后检索下表，根据 Base64编码对照表（见下表）获得对应的值
​
为什么么需要Base64编码 方便网络传输 Base64的那64个字符只包含最基础的字符，所以在各种环境进行传输的时候，极大地减少了出现莫名其妙的问题的概率 简单的隐藏可见内容 （Base64只是一种编码方式，不能用来加密信息） 将二进制数据转化为可打印字符 ​
Base64优缺点 缺点:
Base64会增加字节数 Base64编码不是加密算法 优点:
Base64能简单隐藏内容 Base64算法简单可逆，不会消耗太多CPU，不影响效率 Base64能将所有数据转化为可打印数据 减少网络传输出现的编解码错误 ​
Base64的使用场景 网上留言自己的联系方式等私密信息，可以使用Base64加密一下，这样就不会直接泄露自己的信息，只有真正需要的人才会拿去解密，可以过滤一部分人 包含一些特殊字符的字符串等可以先用Base64编码一下防止被转义 http请求，在解析参数时是根据?</description></item><item><title>SSL-TSL-HTTPS和CA证书</title><link>/2021/01/14/ssl-tsl-https%E5%92%8Cca%E8%AF%81%E4%B9%A6/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/01/14/ssl-tsl-https%E5%92%8Cca%E8%AF%81%E4%B9%A6/</guid><description>对称加密 对称加密就是在两端通信的时候使用同一个密钥进行加密解密，
特点：
不够安全，密钥如何传的问题（由非对称加密解决） 加解密的CPU消耗低 相关算法：DES、AES
本质就是将 密钥+数据 进过一个公式或则运算获得密文，对方也用 密钥+密文 进过一个公式或运算能还原回数据，下面展示最简单的 XOR对称加密:
现在有密钥: 1111 待加密的密文: 1010
第一次XOR: 1010^1111=0101 第二次XOR: 0101^1111=1010 可以看到进过两次XOR运算又回去了，因此就可以利用此特性进行对称加密 但是要加密的信息往往比密钥长，密钥一般很短，那么就需要将数据进行分组，每组长度就是密钥的长度，然后分别对每组进行XOR运算，最后拼接
比如现在A用密钥进行加密(XOR运算)了，B收到加密的密文之后还是用相同的密钥进行XOR运算，这样就可以解密了
​
非对称加密 非对称加密就是使用不同的密钥进行加密解密，比如使用 公钥 加密，使用 **私钥 **解密
特点：
安全，解决了 对称加密 密钥传输问题 加解密CPU消耗高，需要复杂的数学运算 所以一般使用非对称加密进行传输对称加密密钥，之后用对称加密进行通信
相关算法：RSA、ECC
非对称加密就是将 公钥+数据 进过一个公式进行处理就变成一个密文，然后对方用 私钥+密文 也进过一个公式处理就变成了原始数据，反之同理
​
​
信息摘要 摘要主要是为了 防止信息被篡改 ，又称为 信息指纹 ，并且通过摘要算法之后可以讲不同长度的数据都变为固定长度的hash字符串
字符串、文件等内容经过 摘要算法(hash算法) 进行hash散列之后得到的一串固定长度的 hash字符串 这就是 信息摘要
摘要算法其实是一种 单向的加密算法 ，只能加密而不能解密，也就是说不能通过hash字符串推出原来的数据
常见的hash算法有：MD5、SHA256
​
​
数字签名 数字签名是一个非对称加密的方式，私钥签名，公钥解密</description></item></channel></rss>