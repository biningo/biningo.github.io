<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSL\TLS on lyer's blog</title><link>/tags/ssl%5Ctls/</link><description>Recent content in SSL\TLS on lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Thu, 14 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ssl%5Ctls/index.xml" rel="self" type="application/rss+xml"/><item><title>SSL-TSL-HTTPS和CA证书</title><link>/2021/01/14/ssl-tsl-https%E5%92%8Cca%E8%AF%81%E4%B9%A6/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><author>icepan@aliyun.com (lyer)</author><guid>/2021/01/14/ssl-tsl-https%E5%92%8Cca%E8%AF%81%E4%B9%A6/</guid><description>对称加密 对称加密就是在两端通信的时候使用同一个密钥进行加密解密，
特点：
不够安全，密钥如何传的问题（由非对称加密解决） 加解密的CPU消耗低 相关算法：DES、AES
本质就是将 密钥+数据 进过一个公式或则运算获得密文，对方也用 密钥+密文 进过一个公式或运算能还原回数据，下面展示最简单的 XOR对称加密:
现在有密钥: 1111 待加密的密文: 1010
第一次XOR: 1010^1111=0101 第二次XOR: 0101^1111=1010 可以看到进过两次XOR运算又回去了，因此就可以利用此特性进行对称加密 但是要加密的信息往往比密钥长，密钥一般很短，那么就需要将数据进行分组，每组长度就是密钥的长度，然后分别对每组进行XOR运算，最后拼接
比如现在A用密钥进行加密(XOR运算)了，B收到加密的密文之后还是用相同的密钥进行XOR运算，这样就可以解密了
​
非对称加密 非对称加密就是使用不同的密钥进行加密解密，比如使用 公钥 加密，使用 **私钥 **解密
特点：
安全，解决了 对称加密 密钥传输问题 加解密CPU消耗高，需要复杂的数学运算 所以一般使用非对称加密进行传输对称加密密钥，之后用对称加密进行通信
相关算法：RSA、ECC
非对称加密就是将 公钥+数据 进过一个公式进行处理就变成一个密文，然后对方用 私钥+密文 也进过一个公式处理就变成了原始数据，反之同理
​
​
信息摘要 摘要主要是为了 防止信息被篡改 ，又称为 信息指纹 ，并且通过摘要算法之后可以讲不同长度的数据都变为固定长度的hash字符串
字符串、文件等内容经过 摘要算法(hash算法) 进行hash散列之后得到的一串固定长度的 hash字符串 这就是 信息摘要
摘要算法其实是一种 单向的加密算法 ，只能加密而不能解密，也就是说不能通过hash字符串推出原来的数据
常见的hash算法有：MD5、SHA256
​
​
数字签名 数字签名是一个非对称加密的方式，私钥签名，公钥解密</description></item></channel></rss>