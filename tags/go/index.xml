<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go - 标签 - lyer's blog</title><link>/tags/go/</link><description>Go - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Mon, 10 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/go/" rel="self" type="application/rss+xml"/><item><title>Go工具链</title><link>/2021/05/10/go%E5%B7%A5%E5%85%B7%E9%93%BE/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/05/10/go%E5%B7%A5%E5%85%B7%E9%93%BE/</guid><description>go get和go install go1.6之后，go get命令的设计主要用于追加go.mod的依赖包，如下:
go get github.com/go-redis/redis/v8 #如果不添加版本的话就在最新的版本 go get github.com/gin-gonic/gin@v1.7.0 #可以添加版本 当然，也可以在go.mod直接添加依赖或则删除依赖，然后使用如下命令来处理依赖
此命令会清除项目没有使用的依赖以及项目使用的依赖会进行下载
go mod tidy #此命令应该会很常用 go install命令用于安装二进制文件，此命令会下载对应的库到本地，然后自动执行build编译代码生成二进制文件转移到$GOPATH/bin路径下。此命令必须添加版本
此命令是全局安装，不会修改项目的mod文件
go install github.com/cosmtrek/air@v1.15.1 ​
go build 将代码编译为相关平台的可执行文件，只需要编译带有main的入口文件即可
go build #会寻找当前目录下main入口文件然后进行编译 会编译所有 go build -o main #指定生成可执行文件的名字 go build mymain.go #也可以编译指定的go文件 然后就会连一起依赖的代码都编译为一个二进制 ​
go env 用于管理go的环境变量相关信息，go相关环境变量也可在.bashrc等文件里面设置，优先级高
go env #打印所有go的环境变量 go env GOPROXY #打印某个环境变量的值 go env -json #json格式输出 go env -w GOPROXY=https://goproxy.cn,direct #修改某个值 这里设置了中国代理，direct表示如果代理没有则直接走go官网，可以设置多个代理网站，用逗号分割 go fmt和gofmt go fmt是对gofmt的封装，直接使用gofmt即可，格式化如果不加-w是不会改变源代码的，所以最常用的就是：
gofmt -w .</description></item><item><title>Go指针</title><link>/2021/05/10/go%E6%8C%87%E9%92%88/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/05/10/go%E6%8C%87%E9%92%88/</guid><description><![CDATA[返回局部变量的指针 Go支持垃圾回收，所以当一个函数返回了局部变量的地址这是合法的。这是Go和C指针的区别之一。Go编译器会作内存逃逸分析，如果一个局部遍历的指针被返回了则会将他的内存分配到堆空间
type Stu struct { Name string Age int } func NewStudent() *Stu { stu := Stu{} stu.Name = &#34;lyer&#34; stu.Age = 18 return &amp;stu //这是合法的 } func main() { stu:=NewStudent() stu.Age = 21 } ​
Go指针的限制   普通类型的指针不能作算术运算
  一个指针类型的值不能被随意转化为另外一个指针类型，也就是说每个类型的指针其实也相当于一个类型
  指针只能在同类型比较(==、!=)
func main() { s1:=&amp;Stu{} s1= nil s2:=&amp;Stu{} log.Println(s1==s2) //false }   指针的值不能赋给其他类型的指针
  综上所述: Go每个类型的指针都是一个独立的类型
任意一个类型的指针都可以转化为unsafe.Pointer类型，此类型相当于void*
​
unsafe.Pointer和uintptr unintptr属于一个可运算的指针类型，其长度每个平台不一样，比如64位平台则此类型必须能够表达所有的地址，所以长度为int64
注意unintptr指向的地址不会被Go感知到，也就是说其指向的地址无法保证不被GC回收
unsafe.Pointer指针相当于void*，其它所有类型的指针都可以转化为此类型，如果要进行运算的话则需要继续转化为uintptr]]></description></item><item><title>Go语法细节基础</title><link>/2021/03/08/go%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/08/go%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82%E5%9F%BA%E7%A1%80/</guid><description><![CDATA[byte和rune byte是uint8的内置别名，代表一个字节，我们可以将byte和uint8看作是同一个类型 rune是int32的内置别名，代表一个字符， 我们可以将rune和int32看作是同一个类型，代表一个Unicode字符，Unicode字符目前还没超过32位
var b1 rune =&#39;你&#39; // var b byte = &#39;你&#39; 报错 var b2 rune = 20320 //你的Unicode值 var b3 byte = &#39;a&#39; uintptr、int、uint uintptr代表一个地址，所以必须要能寻找到计算机所能表示的最大地址，随意其大小随计算机的位数而确定，如果是64位则该类型的大小也是64位的
同理int、uint等也是相似的，随本机类型而定，64位机器则是int64
type自定义类型 type MyInt int64 //此类型是一个新的自定义类型 和int64类型不一样 type Int64=int64 //此类型和int64类型是一样的 类型0值    类型 默认值     bool false   int、float64等数值类型 0   string &quot;&quot;    整数类型的表示 d1:=0x10F //16进制 d2:=0b111	//二进制 d3:=10_000_000 //可以用下划线分割方便观看 10000000 浮点数的表示 //[float64] d1:= .]]></description></item><item><title>Go优雅的处理error</title><link>/2021/02/15/go%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86error/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/15/go%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86error/</guid><description>大道至简的error go的错误处理就只有一个errors包和一个error接口，这个接口只包哈一个Error方法，该方法返回一个string，这个包的代码很少，只有两个文件：
errors.go wrap.go go的error也就是通过创建一个 错误提示的字符串 的方式，然后通过返回值来返回这个错误，基本每个函数的返回值都标配一个error对象以及函数本身的返回值：
函数本身返回值 error对象 最简单的创建错误的方式就是通过errors.New来创建：
func f() error{ return errors.New(&amp;#34;error&amp;#34;) } 下面来看下errors.go的源码，不过10行左右
func New(text string) error { return &amp;amp;errorString{text} } // errorString is a trivial implementation of error. //实现了error接口 type errorString struct { s string } //获取错误字符串的方法 func (e *errorString) Error() string { return e.s } 综上来看，我们只需要实现error接口即可自定义错误（很多包都有自定义错误，可以参考他们的实现）：
type ZeroDivisionError struct { msg string code int } func (e ZeroDivisionError) Error() string { return fmt.</description></item><item><title>Go测试总结</title><link>/2021/02/15/go%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/15/go%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</guid><description>go中的测试 go的测试是是以 xxx_test.go结尾的，前面的名字和对应的测试文件名字一样，后面加个test，运行测试命令之后就会扫描所有测试文件进行测试
xxx_test.go测试文件中主要有如下几个部分:
类型 格式 作用 单元测试 函数名前缀为Test 测试程序的一些逻辑行为是否正确 基准测试 函数名前缀为Benchmark 测试函数的性能 示例代码 函数名前缀为Example 为文档提供示例文档 ​
单元测试 $ go test -v #扫描当前包下所有的测试文件进行测试 并且输出详细信息 $ go test -v -test.run A #测试包含 A 字母的单元测试函数 [只能运行单元测试] 单元测试函数必须以 t *testing为参数，t主要用于报告测试结果是否正确以及日志记录，主要有如下几个方法:
Error Log 最常用
//标记失败 func (c *T) Fail() //标记失败，但继续执行当前测试函数 func (c *T) FailNow() //标记失败，停止下面的执行 func (c *T) Failed() bool //日志信息 go test如果测试成功的话，不会打印这部分内容，加上 -v则测试成功也会显示 func (c *T) Log(args .</description></item><item><title>Go随机数用法</title><link>/2021/02/15/go%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%A8%E6%B3%95/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/15/go%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%A8%E6%B3%95/</guid><description><![CDATA[基本用法 go随机数在math/rand包下，go的随机数需要先给他一个Seed，Seed如果一样的话或则不设置的话每次生成的都是 伪随机数 ，多次执行生成的都是一样的随机数序列，所以必须设定Seed而且还是以 时间戳 的方式来设置，如下生成 [0,10)之间的随机整数：
rand.Seed(time.Now().UnixNano()) r:=rand.Intn(10) //[0,10) 返回int类型 r=rand.Int63n(10) //返回int64 .... 如果要生成指定范围的随机整数，如下生成[min,max)之间的随机整数：
rand.Seed(time.Now().UnixNano()) max:=10;min:=-10 rand.Intn(max-min)+min) //[-10,10) ​
随机负载均衡实现 我们实战一下，实现一个 随机数负载均衡
type RandomBalance struct { curIndex int hosts []string } func (r *RandomBalance) Add(host string) { r.hosts = append(r.hosts, host) } func (r *RandomBalance) Next() (string, error) { if len(r.hosts) == 0 { return &#34;&#34;, errors.New(&#34;no host&#34;) } rand.Seed(time.Now().UnixNano()) r.curIndex = rand.Intn(len(r.hosts)) return r.hosts[r.curIndex], nil } func main() { rb := RandomBalance{} for i := 1; i &lt; 10; i++ { rb.]]></description></item><item><title>Go数组与slice</title><link>/2021/02/14/go%E6%95%B0%E7%BB%84%E4%B8%8Eslice/</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/14/go%E6%95%B0%E7%BB%84%E4%B8%8Eslice/</guid><description>数组 值拷贝 a:=[...]int{1,2,3} a2:=a log.Println(a,a[0]) log.Println(a2,a2[0]) //也可以通过下标访问 a2[0] = 10 log.Println(a) //a[0]=1 指针传递 //通过指针访问数组 a:=[...]int{1,2,3} a2:=&amp;amp;a log.Println(a,a[0]) log.Println(a2,a2[0]) a2[0] = 10 log.Println(a) //a[0]=10 ​
切片与数组 数组 array := [3]int{1,2,3} array := [...]int{1,2,3} 切片 array := []int{1,2,3} //len=3 cap=3 array := make([]int,2) //len=2 cap=2 arr := [5]int{1,2,3,4,5} //底层数组可见 会修改原数组 相当于原数组1-3的子数组指针 array :=arr[1:3] //cap=5-1=4 len=3-1=2 array[0]=99 //arr[1]=99 被修改了 log.Println(arr) //[1 99 3 4 5] ​</description></item><item><title>优雅的写Go</title><link>/2021/02/14/%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99go/</link><pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/14/%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99go/</guid><description>跟新中&amp;hellip;..
静态代码检查工具 1、goimports goimports 是 Go 语言官方提供的工具，主要有如下几个作用：
自动格式化 Go 语言代码 对所有引入的包进行管理，自动增删依赖的包引用、将依赖包按字母序排序并分类 goimports 就是等于 gofmt 加上依赖包管理
用法和go fmt差不多，这里不再赘述，另外，在CI/CD中不应该加入这些检查，因为这是开发者的本职工作，应该由开发者来规范代码
goimport -w . #格式化 并且修改原文件 2、go vet和golint 代码语法检查、代码风格检查，官方提供，没什么用
3、golangci-lint 强大的go开源静态代码分析，用于CI防止不规范代码合并，主要有几个用途：
代码规范 代码风格统一 语法错误、冗余语法等 golangci-lint run ./... golangci-lint run dir1 dir2/... dir3/file1.go 具体见官网：https://golangci-lint.run/usage/performance
​
go代码报告评分平台 https://goreportcard.com
​
参考 https://www.jianshu.com/p/ca38dcdaf6bb
https://supereagle.github.io/2019/10/03/golang-lint/</description></item><item><title>GoModules包管理</title><link>/2021/02/12/gomodules%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/12/gomodules%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description><![CDATA[Go Modules环境变量 要开启Go Modules管理，需要设置一个环境变量：
GO111MODULE=&#34;on&#34; #默认是开启的 ​
go.mod文件 //1、每个模块都有一个名字 通常通过 go mod init 指定 module github.com/biningo/go-play //2、指定go版本 go 1.15 //3、指定依赖的库地址 &lt;url&gt; &lt;version&gt; 形式 require ( github.com/gin-gonic/gin v1.6.3 ) //4、replace 替换 require 中声明的依赖，使用另外的依赖及其版本号 不经常使用 replace github.com/gin-gonic/gin v1.6.3 =&gt; github.com/gin-gonic/gin v1.6.3 //5、exclude 排除某些版本 exclude ithub.com/gin-gonic/gin v1.5.0 模块名字主要有如下几个作用：
  作为模块的标识
  作为模块的 import path
当其他项目引用这个模块下的 package 时都会以该 import path 作为共同的前缀，自己的项目引用自己项目的包也必须是这个前缀，代表了这个项目，然后前缀下就可以根据路径来引入包了
  开启mod模式之后，所有的go get命令拉取的包都会放到$GOPATH/pkg/mod路径下，如果是在项目下面执行go get则也会同时将响应的依赖信息记录到go.mod文件
go mod的replace命令主要用来替换原来的包，使用场景有如下几个
  单纯的替换包（用处不大）
  替换无法下载的包]]></description></item><item><title>Go文档管理和规范</title><link>/2021/02/12/go%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%92%8C%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/12/go%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%92%8C%E8%A7%84%E8%8C%83/</guid><description>godoc godoc -http=:8000 #开启本地文档服务器 ​
Go文档注释规范 因为go的注释即文档，文档都是根据注释生成的，所以文档的详细性和合理性都必须要求注释必须符合一定的规范，这样才可以生成漂亮详细的文档
文档主要有如下几部分组成:
组成 作用 Overview 包含包的 import 语句和概要说明 Index 包含包中可见性为 public 的常量、类型、方法、函数的总目录及说明 Constants 项目所有的导出常量 Variables 显示所有全局变量 Functions 显示所有函数 Types 显示所有type Overview 用于整个项目的简单描述，是项目中一级目录下所有包头开始的注释内容的合并，一般将这些信息单独写在doc.go文件中，比如gin的doc.go下的内容为：
/* Package gin implements a HTTP web framework called gin. See https://gin-gonic.com/ for more information about gin. */ package gin // import &amp;#34;github.</description></item></channel></rss>