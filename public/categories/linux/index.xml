<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Linux - 分类 - lyer's blog</title><link>/categories/linux/</link><description>Linux - 分类 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Fri, 19 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/linux/" rel="self" type="application/rss+xml"/><item><title>Shell脚本基本语法总结</title><link>/2021/03/19/shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/19/shell%E8%84%9A%E6%9C%AC%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description><![CDATA[变量 变量替换
${@}和${*} 的区别
两个都是用于获取所有入参，区别在于&quot;${@}&quot;被双引号包裹会展开里面的所有的值，而&quot;${*}&quot;则会将所有值当做一个，如果不加双引号那么他们就没有区别
#下面只会执行一次循环 for i in &#34;${*}&#34;;do echo $i done #下面会输出每个参数 for i in &#34;${@}&#34;;do echo $i done 字符串 ''和 &quot;&quot; 的区别
name=&#34;lyer&#34; s1=&#39;hello,${name}\n&#39; #不会转义,原样输出 s2=&#34;hello,${name}\n&#34; #转义 字符串拼接
s1=&#34;abc&#34; s2=&#34;def&#34; s3=${s1}&#34;-&#34;${s2} 获取字符串的长度
name=&#34;lyer&#34; echo ${#name} #和array的操作一样 获取子串
${username:1} #[1,] ${username:1:2} #1开始获取2个 包括1 ${username:1:-2} #[1,-2) ${username::2} #截取0-2  ${username: 2} ${username: -3}：提取最后3个字符，注意冒号后面添加一个空格：txt 参考  https://wangdoc.com/bash/intro.html 【阮一峰Bash脚本教程】  ]]></description></item><item><title>Linux常用命令总结</title><link>/2021/02/23/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/23/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</guid><description><![CDATA[持续跟新&hellip;..
 进程相关 进程的信息都在/proc下
ps ps 显示系统进程
ps -ef ps -aux ps -ef | grep sshd jobs fg bg &amp; nohub &amp; jobs fg bg nohub
./exe &amp; #后台运行 ./exe &gt; log.txt 2&gt;&amp;1 &amp; #0:标准输入 1:标准输出 2:标准错误 2&gt;&amp;1是将标准出错重定向到标准输出 最终结果就是`标准输出`和`错误`都被重定向到`log.txt`中 etcd &gt; /dev/null 2&gt;&amp;1 &amp; #后台运行 同时输出日志重定向到垃圾桶 nohup etcd &gt; /dev/null 2&gt;&amp;1 &amp; #以守护进程方式运行 不会随着终端退出而退出 jobs #查看后台运行中的进程 #ctrl+z暂停任务 ctrl+c终止任务 fg 1 #将后台任务放到前台执行 bg 1 #将一个暂停的任务放在后台执行 kill kill killall
kill -9 1111 #强制终止 killall 1111 #杀死进程 以及所有子进程 pstree pstree 显示进程树]]></description></item></channel></rss>