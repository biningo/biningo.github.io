<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>编程语言/Java - 分类 - lyer's blog</title><link>/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java/</link><description>编程语言/Java - 分类 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><atom:link href="/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/java/" rel="self" type="application/rss+xml"/><item><title>Java并发总结</title><link>/2021/04/27/java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/27/java%E5%B9%B6%E5%8F%91%E6%80%BB%E7%BB%93/</guid><description>TODO</description></item><item><title>Java枚举</title><link>/2021/04/04/java%E6%9E%9A%E4%B8%BE/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/04/java%E6%9E%9A%E4%B8%BE/</guid><description>Java枚举的简单使用 public enum HttpStatus { OK, NoContent, NotFound, InternalServerError, BadGateway } 可以使用如下几个常见的枚举方法
public static void main(String[] args) { HttpStatus ok = HttpStatus.OK; String okStr = ok.name(); //OK Integer okIndex = ok.ordinal(); //0 HttpStatus notFound = HttpStatus.valueOf(&amp;#34;NotFound&amp;#34;); //str-&amp;gt;enum HttpStatus[] values = HttpStatus.values(); //string values } ​
枚举实现原理 枚举是Java的一种语法糖，内部通过继承 Enum抽象类来实现，下面我写了一个类来说明枚举类实现原理，就是通过 static变量+static初始代码块 来实现的，这就是为什么枚举非常适合作单例的原因
public final class WeekDay { private final String name; private final Integer ordinal; private WeekDay(String name, Integer ordinal) { this.</description></item><item><title>JavaIO流总结</title><link>/2021/03/23/javaio%E6%B5%81%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/23/javaio%E6%B5%81%E6%80%BB%E7%BB%93/</guid><description>OverView Java 的 I/O 大概可以分成以下几类：
磁盘操作：File 字节操作：InputStream 和 OutputStream 字符操作：Reader 和 Writer 对象操作：Serializable 网络操作：Socket 非阻塞IO：NIO ​
File文件相关操作 File类是操作文件系统的相关操作，如果要读取文件内容的数据，则需要传递给IO流对象，通过IO流的方式进行读取
File f = new File(&amp;#34;/home/pb/tmp/printf.sh&amp;#34;); FileInputStream inputStream = new FileInputStream(f); 通过操作此对象可以创建文件、列出目录下的文件列表、判断文件是否可读、判断类型等操作
f.isFile(); f.createNewFile(); ​
InputStream 字节流接口，所有流的接口，比如:
FileInputStream文件流用于读取文件 ByteArrayInputStream 从字节数组里面读取流 OutPutStream就是将数据写入到目标处，这里将程序员作为主体，Out表示程序员将数据输出到计算机，Input则表示计算机的数据要输入到程序员中
​
BufferedInputStream 带有一个字节缓冲数组的InputStream ，需要传入一个实现了 InputStream 接口的流，比如文件，使用了装饰者模式 ，读取流的话不是直接操作文件了，而是每次读取会预先读取到一块byte[]中，相当于缓冲，然后更具用户读取的大小从缓冲区里面读取到用户的字节数组中
​
Reader 字符流接口 一个字符可能有多个字节组成比如汉字，实现的接口有:
InputStreamReader 接受一个 InputStream 对象，然后按照编码将字节进行转化为字符 FileReader 继承 InputStreamReader ，用于直接读取文件，里面就是根据传入的File对象或则文件名创建一个 FileInputStream 然后传入父类 InputStreamReader ​
BufferedReader 带缓冲的Reader，需要传入一个实现了 Reader 接口的流，比如文件FileInputStreamReader，读取的话会先读入到char[]中，然后直接从char[]缓冲区进行读取，装饰者模式</description></item><item><title>Java集合总结和源码浅析</title><link>/2021/03/21/java%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E5%92%8C%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</link><pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/21/java%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93%E5%92%8C%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</guid><description><![CDATA[OverView ​
HashMap和HashTable HashMap刚开始是一个Node节点的数组 ，初始化为16大小 如果节点元素个数达到一定的值(这个值略小于 HashTable 的大小)，则会进行扩容
然后逐渐放入元素，刚开始如果发生碰撞就采用 拉链法 进行解决碰撞 ，如果链表的节点个数&gt;=8同时 数组 大小大于64 则会进行树化，转化为 红黑树 来加快查找(红黑树是一颗高度平衡的二叉查找树) 如果链表节点个数大于8但是数组小于64则会进行扩容数组
HashTable和HashMap的主要区别如下:
 HashTable是并发安全的，HashMap不安全 HashTable的value不允许null，HashMap允许 HashTable属于老的集合容器，HashMap属于新一代集合容器  ​
ConcurrentHashMap 和HashMap差不多，但是这个是并发安全的
在 JDK1.8 中，ConcurrentHashMap 选择了与 HashMap 相同的数组+链表+红黑树结构，在锁的实现上，采用 CAS 操作和 synchronized锁 实现更加低粒度的锁，将锁的级别控制在了更细粒度的 table 元素级别，也就是说只需要锁住这个链表的首节点，并不会影响其他的 table 元素的读写，大大提高了并发度
​
LinkedHashMap LinkedHashMap能保持插入的顺序，HashMap+双链表 实现
在插入的时候同时给每个节点都按照插入的顺序串成一个双链表(LinkedHashMap给之前HashMap中的链表节点多加了两个前后节点实现)，这样遍历的时候就可以保持插入的顺序了，同时用key取值得时候效率还和 HashMap 一样
下面两个
public static void main(String[] args) { LinkedHashMap&lt;String, String&gt; m1 = new LinkedHashMap&lt;&gt;(); m1.put(&#34;name&#34;, &#34;lyer&#34;); m1.put(&#34;age&#34;, &#34;18&#34;); m1.put(&#34;score&#34;, &#34;100&#34;); m1.forEach((k, v) -&gt; System.]]></description></item><item><title>Java泛型总结</title><link>/2021/03/20/java%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/20/java%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/</guid><description><![CDATA[为什么需要泛型 Java的泛型机制在Java 5.0中加入，为什么需要泛型呢?
在以前没有泛型的情况下，一个 List 类型要能存放所有类型那么底层只能是Object数组来接受所有类型，这样的话我们可以将所有类型都放入这个Lits中，从Lits中获取元素的时候再强转，这样很容易会引发 ClassCastException异常
再来想想，如果不使用Object会怎么样？
这样的话虽然可以避免 ClassCastException异常 但是就要为每种类型都写一个List类，增加了代码量
如果加入泛型之后就不会在运行时引发错误，因为错误都会在编译的时候就发现，泛型的引入能让编译器更好的优化和检查程序的前期错误而不是等到运行的时候再出现错误
并且也不需要为每种类型都写一个List了，直接在new的时候指定类型即可，相当于造了一个代码模具(因为这个代码对于每种类型的操作都是一样的)，使用的使用填充类型即可
总结一下为什么需要泛型:
 强类型，编译器通过泛型实现类型检测，避免运行时类型转换错误，增强代码可读性 对象重用，减少代码量  ​
泛型在Java中的使用 泛型类和泛型方法的案例
public class Pair&lt;T, U&gt; { private T t; private U u; public Pair(T t, U u) { this.t = t; this.u = u; } public T getT() { return this.t; } //泛型可以单独应用在方法上 调用: p.&lt;String&gt;(&#34;one&#34;)  public &lt;E&gt; void echo(E e) { System.out.println(e); } public U getU() { return this.u; } 泛型还可以应用在 接口 上]]></description></item><item><title>Java注解和反射</title><link>/2021/03/20/java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/20/java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</guid><description><![CDATA[为什么需要注解 注解也是Java 1.5开始引入的，注解产生是为了替代早期的XML配置文件的，早期使用配置文件XML
其中注解与代码强耦合，一旦改变就需要重新编译，而XML配置文件则和代码分开，修改XML配置文件不需要重新编译因为XML原本就是不编译进字节码中的，Java代码通过文件读取的方式获取XML配置文件的信息
但是注解的优点就是方便简洁好维护，而XML则不方便不容易维护而且配置复杂
​
元注解 元注解 是一种注解在注解上的一种注解，由Java标准库提供，我们自定义注解必须要标注上元注解用于说明这个自定义注解的范围等
元注解有如下4个:
 @Target 表示注解可以注解在方法上还是类上 @Retention 表示注解保留在什么范围 ，一般注解和反射配合使用，所以一般这个值为runtime 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们 @Documented  将注解中的元素包含到 Javadoc 中 @Inherited 子类可以继承父类的注解  ​
自定义注解 如果注解只有一个值，则需要设置为value()这样注解上就不需要key指定了
@Target(ElementType.METHOD) public @interface My { String value() default &#34;&#34;; //可以赋值默认值 } 直接这样使用即可，如果有多个则必须要指定key，没有指定默认值得必须写出值，否则可以不写使用默认值
@My(&#34;A&#34;) 注解也可以定义数组，数组元素只有一个时不需要花括号包裹
@Target(ElementType.METHOD) public @interface My { String value() default &#34;&#34;; String[] names(); } @My(value=&#34;A&#34;,names={&#34;lyer&#34;,&#34;b&#34;}) ​
为什么需要反射 首先来看反射能做什么我们才可以知道为什么需要反射机制了:
 有了反射我们可以在程序运行时动态的加载类，只需要给定类的全路径名即可，而不需要硬编码代码中 反射相当于给了程序员一个后门 可以破坏封装，直接获取一个类的所有属性或则方法，让我们了解一个陌生类的所有属性和方法，知道这个类里面都有什么东西，并且可以创建这个类执行里面的私有方法等  知道反射能干啥之后我们就可以得出为什么需要反射机制了:
  方便测试
  运行时动态加载类，不需要编译时确定写死 (并且有些类无法在编译之前就知道需不需要加载，只有在运行时才知道是否需要加载，这时候就需要反射了，比如数据库驱动，用户可能选择不同的数据库，所以程序需要更具用户的XML配置等来决定加载哪个数据库的驱动)]]></description></item><item><title>HashMap源码分析</title><link>/2021/03/12/hashmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/12/hashmap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description><![CDATA[为什么对象需要同时重写equals和hashcode Object对象有两个重要的方法: equals hashcode
public boolean equals(Object obj) { return this == obj; //默认直接比较是否是同一个引用 } @HotSpotIntrinsicCandidate public native int hashCode(); equals 默认是直接比较是否是同一个引用
hashCode 则不同机器实现不一样，一般是用变量的内存地址来进行计算hash值的
如果一个对象要放入 HashSet 或则 HashMap 的话，需要遵循下列原则，否则就会出现不可预期的错误(HashSet是用HashMap来实现的，所以只需要讨论HashMap即可):
 如果一个类重写了equals()方法，则必须重写hashCode()方法。2个对象的equals()方法返回true的话，其hashCode()必须返回相同的值
 为什么需要重写 hashCode() 方法呢?
这个很好理解，因为HashMap查找和放入一个 kv 必须计算出key的hash值，然后选择合适的位置放入value，其实就是直接调用key的hashCode()方法计算hash值，下次查找就是直接根据hash值来直接索引到value(这里还需要考虑Hash碰撞问题)，这样就实现了O(1)速度的查找，HashMap是典型的空间换时间的例子
如果我们不重写hashCode()方法，则会调用父类Object的hashCode方法，该方法是根据值得内存地址计算得出的，也就是说我们不重写的话，那么两个我们认为值相同的key对象计算出的hash值就会不一样，这样就会导致错误，比如HashSet无法进行去重等，下面的Student没有重写hashCode方法
public static void main(String[] args) { HashSet&lt;Student&gt; set = new HashSet&lt;&gt;(); Student s1 = new Student(&#34;one&#34;); Student s2 = new Student(&#34;one&#34;); set.add(s1); set.add(s2); System.out.println(set.size()); //2 【错误】这里应该为1 } 已经重写了hashCode()，为什么还需要重写equals()方法？
虽然我们重写了hashCode() 方法，但是还是无法得出正确的结果，因为hash值可能会发生 hash碰撞 ，也就是两个不同值得对象计算出的hash值一样，这个时候就会用 拉链法 等算法来解决碰撞，所以如果只比较hashCode就认为两个对象是相等的这显然是不合理的，所以 HashMap 在添加和取对象的时候不仅仅会比较hashCode，还会比较equals方法，如果两个都相等才判断为同一个对象]]></description></item></channel></rss>