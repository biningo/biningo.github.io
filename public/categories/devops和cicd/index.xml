<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>DevOps和CICD - 分类 - lyer's blog</title><link>/categories/devops%E5%92%8Ccicd/</link><description>DevOps和CICD - 分类 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Mon, 01 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/devops%E5%92%8Ccicd/" rel="self" type="application/rss+xml"/><item><title>git总结</title><link>/2021/02/01/git%E6%80%BB%E7%BB%93/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/02/01/git%E6%80%BB%E7%BB%93/</guid><description><![CDATA[什么是git  版本控制工具 分布式  git在中心仓库保存所有的版本信息
同时也会在所有用户的本地也会保存所有版本
这样就做到了 分布式，git在中心仓库挂了之后依然可以在本地提交版本，等中心仓库恢复之后再一起push上去
使用git分布式版本管理工具的最重要的就是要解决多人协作的 版本冲突 问题
在使用git的时候，时刻需要保持一个理念：
  你的每次commit都是一个版本
  提交版本的时候就会标注上 user.name、user.email 指示出这是谁提交的版本
  只要是一个版本，那么在以后就都可以回滚到这个版本中
  ​
三大区域 **工作区：**直接写代码，修改文件的地方
暂存区： 将工作区的当前映象暂存起来以准备提交到版本库中，简单来说就是可以在提交最终的版本之前还可以继续修改反悔等，举个简单的例子：
 我删除了a，并且add到暂存区 现在我添加了b，添加完之后就觉得还是a好，于是反悔了，将上次暂存区中的文件又覆盖了工作区，也就是说现在又回到了a 最终我觉得就a了，不再修改了，于是就add+commit将最终的版本提交了  **版本库：**存放最终的版本
**远程仓库：**供多人协作用，本地仓库的版本最终需要push到远程仓库，并且在push之前需要和远程仓库保持 同步 这要所有人才可以看到版本信息
​
三大区域变更 暂存区-&gt;工作区
#1、将暂存区文件覆盖工作区 git restore &lt;file&gt; ... #2、取消暂存 git restore --staged &lt;file&gt;... #3、直接删除暂存区和本地文件 等同于:手动删除文件 + git add file git rm a #4、直接同时修改暂存区和本地文件名字 等同于:mv a b + git rm a + git add b git mv a b 版本库-&gt;工作区]]></description></item></channel></rss>