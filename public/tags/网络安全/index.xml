<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>网络安全 - 标签 - lyer's blog</title><link>/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</link><description>网络安全 - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/" rel="self" type="application/rss+xml"/><item><title>XSS和CSRF攻击</title><link>/2021/06/01/xss%E5%92%8Ccsrf%E6%94%BB%E5%87%BB/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/01/xss%E5%92%8Ccsrf%E6%94%BB%E5%87%BB/</guid><description><![CDATA[XSS攻击 Cross Site Script 跨站脚本攻击，为了不和CSS混淆，所以缩写为XSS
在网页的输入框中最容易被XSS攻击，比如在一个评论框中，用户输入了以下内容
&lt;script&gt;alert(“hello,XSS”)&lt;/script&gt; 那么网页在渲染这段数据的时候就相当于嵌入了一段js脚本代码，以后所有用户访问此网站都会被执行这段代码
上面注入的只是简单的弹窗代码，但是如果注入的是一些恶意的js脚本，那么每个用户访问都会在后台默默的执行注入的恶意js代码
恶意的js代码可以做啥呢
 窃取用户的Cookie，如果Set-Cookie没有设置HttpOnly的话则可以被js代码读取并且通过网络转发给黑客，那么用户的Cookie数据就泄露了 伪造用户，通过js脚本使用用户的Cookie来请求网站，以此假冒用户登入 (利用浏览器的同源策略可以避免) 劫持流量实现恶意跳转，每当用户访问时js代码执行强行跳转劫持用户到另外的站点  预防XSS
  过滤用户的输入
  将用户的输入内容插入特殊符号进行转义
  ​
CSRF攻击 Cross Site Request Forgery 跨站请求伪造攻击
攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求
利用受害者在被攻击网站已经获取的注册凭证Cookie，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的
下面是一个案例
 小明登入了银行网站A，网站A设置Cookie来作为用户之后请求的Token 小明在登入银行A之后被诱导点击了网站B 网站B向A发送了一个转账请求，浏览器会携带上之前网站A设置的Cookie A收到请求之后就会验证通过，此时小明的钱就被网站B转走了  网站B在受害者不知情的情况下冒充受害者，通过Cookie让网站A执行了网站B定义的操作
由于浏览器有同源策略，因此网站B向网站A发送请求会被浏览器认定为跨域，因此会被浏览器拦截
但是有下面几种情况不会被拦截:
  所有拥有src属性的 &lt;script&gt;、&lt;img&gt;、&lt;iframe&gt; 以及&lt;a&gt;标签等，是不会经过同源策略，因为浏览器认为这些标签肯定是网站主动引用外部资源所加入的的所以不需要规定同源策略，例如baidu.com引用了CDN的jquery
  浏览器为了方便表单的提交，所以 &lt;form&gt; 中填的action 也不会限制同源策略，可以填写任意的URL，一旦用户提交表单那么就会请求URL发生跨域。如果用户在恶意网站里面填写并提交了表单则可能会被CSRF攻击
  如何防止CSRF攻击？
 服务端验证请求，比如验证HTTP请求头的Referer字段 浏览器同源策略，防止跨域请求 加入token，比如我们可以在请求参数后面附加一个token，每次请求都验证一下这个token，因为黑客并不知道这个token，则可以防止CSRF攻击  ​
参考 如何防止XSS攻击？
如何防止CSRF攻击？
安全篇——如何预防CSRF攻击
Cookie 的 SameSite 属性]]></description></item><item><title>同源策略和跨域请求</title><link>/2021/06/01/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8C%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/06/01/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8C%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</guid><description><![CDATA[何为同源，何为跨域 首先需要知道什么是 同源和非同源
同源: 域名、协议、端口 完全一致就是同源头
不同源之间相互访问就叫 跨域访问
google.com www.google.com #域名不一致 不同源 google.com:8080 google.com:9090 #端口不一致 不同源 http://google.com https://google.com #协议不一致 不同源 google.com/b.html google.com/c.html #同源 ​
什么是同源策略 浏览器对于非同源请求做出了如下限制，也就是同源策略
  无法读取非同源的 Cookie、LocalStorage IndexDB等内容
  无法读取和修改非同源的DOM
  无法发送非同源的AJAX，如果发送了非同源请求就会被浏览器拦截
  无法发送非同源的请求
  ​
为什么需要同源策略 如果没有同源策略，那么假如小明在A网站登入了，如果小明在没有注销期间访问了B网站，B网站中携带了js脚本向A网站发起了模拟用户的请求，那么此请求会携带上浏览器保存的Cookie，这样B网站的js脚本就可以模拟小明随意操作了，这就是 CSRF跨站脚本伪造攻击
​
跨域请求 在前后端分离的应用中需要规避这个同源策略，因为这是我们主动发起的跨域请求，自认为是安全的，例如前端地址为abc.com:8080,后端API为abc.com:9090 直接访问API会触发同源策略被浏览器拦截，所以需要想办法跨过去
主要有如下几个跨域请求的方法:
  CORS 跨域资源共享
HTTP设置了跨域专用的请求头，后端API服务器abc.com:9090 告诉浏览器特定URL abc.com:8080的ajax请求可以直接使用，不会激活同源策略
  nginx反向代理
前端通过指定路径 abc.com:8080/api 访问后端请求，nginx配置此前缀的URL反向代理到abc.com:8080
  所有拥有src属性的 &lt;script&gt;、&lt;img&gt;、&lt;iframe&gt; 以及&lt;a&gt;标签等，是不会经过同源策略，因为这些标签肯定是网站主动引用外部资源的所以不需要规定同源策略，例如baidu.com引用了CDN的jquery
所以我通过调用js脚本的方式，从服务器上获取JSON数据绕过同源策略]]></description></item><item><title>TLS(SSL)协议</title><link>/2021/03/16/tlsssl%E5%8D%8F%E8%AE%AE/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/16/tlsssl%E5%8D%8F%E8%AE%AE/</guid><description>什么是TLS协议 因为HTTP传输都是明文传输的，如果被中间人截获，那么报文内容就会被盗取
为了防止HTTP明文传输，于是可以讲HTTP报文和数据整个进行加密然后再将数据传递给下层的TCP层，传递到客户端再进行解密，TLS协议就是解决HTTP报文加密问题的，被TLS协议加密之后的HTTP协议就叫HTTPS HTTP over SSL 使用的是443端口
TLS是SSL的改进版，现在都是使用TLS来替换SSL了，但是延续了老的叫法，所有都叫SSL 这两个其实是同一个意思
TLS现在广泛使用的版本为TLS1.2 TLS1.3
加密算法有对称加密、非对称加密 ，如果将HTTP报文采用非对称加密的话那么带来的CPU运算是非常大的，速度也相对较慢，因为HTTP报文一般数据比较大
所以TLS采用对称加密的方式来加密HTTP报文加快加密解密的速度，但是这里就涉及到如何传递 对称密钥 的问题了，这就是 TLS握手 需要解决的问题
TLS握手的作用:
商定双方使用的非对称加密算法和TLS版本 传输非对称加密算法所需的参数和随机数，随机数的作用是加大解密的难度 传输证书和公钥 (非对称加密算法需要使用公私钥) ​
TLS握手第一阶段 1、Client Hello TCP建立之后浏览器会先发送一个Client Hello 报文给服务器，目的是为了告诉服务器如下内容，重点关注如下内容:
客户端TLS版本 支持的加密套件Cipher Suites 服务器会从中选择一个加密算法 随机字符串Random1 ， 这个随机数和之后的生成对称密钥有关 Session ID 用来恢复会话 SessionTicket 客户端保存的TLS的session信息 2、Server Hello 服务器接受到客户端的Client Hello之后就会检查客户端版本、加密套件等信息，检查通过并且符合服务器的条件则服务器会进行回复，也就是发送Server Hello包
回复内容主要是告诉客户端如下几个重要的内容:
确认SSL/TLS协议版本，如果浏览器不⽀持，则关闭加密通信
从Client Hello中选择一个加密套件，如选择RSA，并且告诉客户端选择了那个加密套件用于后面的加密
随机字符串Random2，此时客户端和服务器都拥有两个随机数 Random1、Random2
初次握手服务器会返回一个Session ID，客户端会保存这个ID，之后再进行握手发送Client Hello的时候就会携带上这个Session ID，服务器就会直接查询Session ID对应的信息比如对称加密的密钥，这样就可以直接复用了就不需要再次生成了，因为生成过程也有一定的消耗</description></item></channel></rss>