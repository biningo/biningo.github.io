<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - 标签 - lyer's blog</title><link>/tags/java/</link><description>Java - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Sat, 20 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/java/" rel="self" type="application/rss+xml"/><item><title>Java泛型总结</title><link>/2021/03/20/java%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/20/java%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/</guid><description><![CDATA[为什么需要泛型 Java的泛型机制在Java 5.0中加入，为什么需要泛型呢?
在以前没有泛型的情况下，一个 List 类型要能存放所有类型那么底层只能是Object数组来接受所有类型，这样的话我们可以将所有类型都放入这个Lits中，从Lits中获取元素的时候再强转，这样很容易会引发 ClassCastException异常
再来想想，如果不使用Object会怎么样？
这样的话虽然可以避免 ClassCastException异常 但是就要为每种类型都写一个List类，增加了代码量
如果加入泛型之后就不会在运行时引发错误，因为错误都会在编译的时候就发现，泛型的引入能让编译器更好的优化和检查程序的前期错误而不是等到运行的时候再出现错误
并且也不需要为每种类型都写一个List了，直接在new的时候指定类型即可，相当于造了一个代码模具(因为这个代码对于每种类型的操作都是一样的)，使用的使用填充类型即可
总结一下为什么需要泛型:
 强类型，编译器通过泛型实现类型检测，避免运行时类型转换错误，增强代码可读性 对象重用，减少代码量  ​
泛型在Java中的使用 泛型类和泛型方法的案例
public class Pair&lt;T, U&gt; { private T t; private U u; public Pair(T t, U u) { this.t = t; this.u = u; } public T getT() { return this.t; } //泛型可以单独应用在方法上 调用: p.&lt;String&gt;(&#34;one&#34;)  public &lt;E&gt; void echo(E e) { System.out.println(e); } public U getU() { return this.u; } 泛型还可以应用在 接口 上]]></description></item><item><title>Java注解和反射</title><link>/2021/03/20/java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/20/java%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</guid><description><![CDATA[为什么需要注解 注解也是Java 1.5开始引入的，注解产生是为了替代早期的XML配置文件的，早期使用配置文件XML
其中注解与代码强耦合，一旦改变就需要重新编译，而XML配置文件则和代码分开，修改XML配置文件不需要重新编译因为XML原本就是不编译进字节码中的，Java代码通过文件读取的方式获取XML配置文件的信息
但是注解的优点就是方便简洁好维护，而XML则不方便不容易维护而且配置复杂
​
元注解 元注解 是一种注解在注解上的一种注解，由Java标准库提供，我们自定义注解必须要标注上元注解用于说明这个自定义注解的范围等
元注解有如下4个:
 @Target 表示注解可以注解在方法上还是类上 @Retention 表示注解保留在什么范围 ，一般注解和反射配合使用，所以一般这个值为runtime 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们 @Documented  将注解中的元素包含到 Javadoc 中 @Inherited 子类可以继承父类的注解  ​
自定义注解 如果注解只有一个值，则需要设置为value()这样注解上就不需要key指定了
@Target(ElementType.METHOD) public @interface My { String value() default &#34;&#34;; //可以赋值默认值 } 直接这样使用即可，如果有多个则必须要指定key，没有指定默认值得必须写出值，否则可以不写使用默认值
@My(&#34;A&#34;) 注解也可以定义数组，数组元素只有一个时不需要花括号包裹
@Target(ElementType.METHOD) public @interface My { String value() default &#34;&#34;; String[] names(); } @My(value=&#34;A&#34;,names={&#34;lyer&#34;,&#34;b&#34;}) ​
为什么需要反射 首先来看反射能做什么我们才可以知道为什么需要反射机制了:
 有了反射我们可以在程序运行时动态的加载类，只需要给定类的全路径名即可，而不需要硬编码代码中 反射相当于给了程序员一个后门 可以破坏封装，直接获取一个类的所有属性或则方法，让我们了解一个陌生类的所有属性和方法，知道这个类里面都有什么东西，并且可以创建这个类执行里面的私有方法等  知道反射能干啥之后我们就可以得出为什么需要反射机制了:
  方便测试
  运行时动态加载类，不需要编译时确定写死 (并且有些类无法在编译之前就知道需不需要加载，只有在运行时才知道是否需要加载，这时候就需要反射了，比如数据库驱动，用户可能选择不同的数据库，所以程序需要更具用户的XML配置等来决定加载哪个数据库的驱动)]]></description></item></channel></rss>