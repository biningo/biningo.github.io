<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>UDP - 标签 - lyer's blog</title><link>/tags/udp/</link><description>UDP - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/udp/" rel="self" type="application/rss+xml"/><item><title>为什么DNS使用UDP?</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88dns%E4%BD%BF%E7%94%A8udp/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88dns%E4%BD%BF%E7%94%A8udp/</guid><description>DNS协议 在讲解为什么之前我们先来讲解什么是DNS协议，以及DNS协议的一些细节
DNS协议的作用就是建立 域名和IP地址的映射，因为IP地址太长并且没有语义所以需要给IP一个域名，DNS协议的作用就是将域名转化为IP地址，这就是DNS协议的主要功能，当然还有其他功能比如记录CNAME、IP地址负载均衡等
浏览器在请求一个网址之前需要通过DNS协议获取到这个网址的IP地址这样才可以进行网络通讯建立TCP连接，因为网络中都是以IP地址来识别一个主机的
那么浏览器向谁请求DNS协议呢？这就是DNS服务器的功劳
DNS服务器是专门用来记录域名以及IP地址的映射的一个服务器，其他计算机可以通过DNS协议来请求DNS服务器来查询他所需要的信息，这些信息也是通过DNS协议返回回去的，主机只需要依照DNS协议的规范规则进行请求并且解析响应即可获取信息
DNS服务器主要会记录域名的如下几种记录:
类型 解释 A IP地址记录Address 记录域名对应的IP AAAA IPV6的地址记录 NS DNS服务器记录（Name Server），返回记录此服务器的DNS服务器域名 CNAME 规范名称记录（Canonical Name），返回另一个域名，即当前查询的域名是另一个域名的跳转 SRV 用于服务发现和负载均衡 下面来看一个DNS查询icepan.cloud的完整过程:
dig -t A icepan.cloud +trace .是根DNS服务器，查询会先根据缓存在本地的根域名服务器的NS记录和A记录去查询到权威域名服务器对应的A记录和NS记录
下面是13组根域名服务器对应的NS记录
. 7117 IN NS g.root-servers.net. . 7117 IN NS l.root-servers.net. . 7117 IN NS d.root-servers.net. . 7117 IN NS b.root-servers.net. . 7117 IN NS h.</description></item><item><title>为什么TCP是面相字节流的?</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E6%98%AF%E9%9D%A2%E7%9B%B8%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E6%98%AF%E9%9D%A2%E7%9B%B8%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84/</guid><description>TCP和UDP的区别 其实这个标题可以改为 【TCP和UDP的区别】
我们知道TCP只能进行一对一的传输，而UDP则可以进行一对一、多对多、一对多、多对一传输，主要原因就是TCP会建立虚拟通道建立一个连接来保证数据包的可靠传输，数据包丢了必须进行重传
UDP就不需要保证可靠传输，只要把数据封装为UDP报文填上目标的IP+端口发送出去就行，其它的都交给网络了，不管到没到。
所以一个主机可以发送UDP包给任何的主机而不需要提前建立连接，如果目标主机有监听这个端口那么就可以接收到数据，没有监听则会把这个包丢掉
同理一个主机也可以接受来自任意主机的UDP报文，只需要监听着端口等待数据即可
所以UDP报文其实只是相当于给IP报文加上了个IP+端口而已，继承了IP包、以太网数据帧的特性，不管网络拥塞不拥塞只要应用层有数据就发送，而TCP报文就复杂了，需要记录各个信息，这些信息都是一些维护连接，控制流量的一些信息
TCP是面相字节流的，而UDP是面相报文的
这句话估计已经耳熟能详倒背如流的，那么什么是面向字节流呢？什么是面相报文呢？
​
什么是面相字节流 字节流可以理解为水流，TCP连接会建立一个虚拟通道(其实就是双方维护连接的数据结构，发到哪了收到哪了下面该发那段数据了)，建立通道之后这样就只能一对一的进行可靠传输了，TCP会将应用层的数据看成是一个无结构的字节流数据，简单来说就是没头没尾
如果应用层传递下来的数据太少则TCP可以等一等，积累一些数据再封装为一个TCP包发送，这样就提高传输的效率，因为如果数据大小都比TCP报文头的数据还小这样传输数据的效率是不划算的，这样将就会将应用层传递下来的多个数据合并为一个TCP包进行传输
如果应用层传递下来的数据太多，那么TCP就会拆分为多个TCP报文进行传输，因为TCP报文有一个MSS规定了报文的最大大小 ，这个值和以太网的MTU大小有关，如果一个TCP报文不规定合适的MSS 那么可能会被拆分为多个IP包进行传输，这个就会增加IP包拆分和组装的消耗，所以MSS应该和MTU大小接近不能超过这个值
每次发送的数据包大小都是不一致的，这个和网络状况以及对方的数据接受能力有关，也就是滑动窗口和拥塞控制窗口
​
什么是面相报文 UDP是面相报文的，UDP将应用层数据看作是一个有头有尾的完整的数据包，
也就是说不管应用层传递下来多少数据，多大的数据，UDP都会封装为一个完整的数据包发送出去
接收端也不管接受到了多大多小的UDP数据包都不会进行拆分和组装，而是完整的将UDP报文数据上交给应用层
​
总结 总的来说，TCP是以一次连接的建立和断开为单位进行传输数据的，在连接还没有断开之前一直可以往这个通道里传输数据流，并且不知道这个连接什么时候断开，只有当应用层通知连接可以关闭即开始4次握手断开连接，连接建立代表数据开始传输，连接结束代表数据传输完毕，所以说TCP是面相字节流
UDP则以一次数据包的发送接受为单位，只要应用层传递下来数据，UDP就封装为一个完整的UDP数据包发送出去，此时就可以表示此次的发送已经完成，后面的发送都是独立和无关的都代表着一次UDP连接发送</description></item></channel></rss>