<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Linux - 标签 - lyer's blog</title><link>/tags/linux/</link><description>Linux - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Thu, 07 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/linux/" rel="self" type="application/rss+xml"/><item><title>容器导论</title><link>/2021/01/07/%E5%AE%B9%E5%99%A8%E5%AF%BC%E8%AE%BA/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/01/07/%E5%AE%B9%E5%99%A8%E5%AF%BC%E8%AE%BA/</guid><description>云计算和docker容器历史 PaaS云计算初期 云计算其实就是将主机和一些服务由大的厂商运维，用户只需要付费即可获得服务，PaaS就是用户只需要开发自己的应用程序。部署应用程序的相关基础设施和软件等都由提供服务器厂商安装配置好了，用户只需要上传自己的应用程序即可部署到服务器
初期，如日中天 AWS 和盛极一时的 OpenStack，以 Cloud Foundry 为代表的开源 PaaS 项目，却成为了当时云计算技术中的一股清流
docker开源 当时还名叫 dotCloud 的 Docker 公司，也是这股 PaaS 热潮中的一份子
相比于 Heroku、Pivotal、Red Hat 等 PaaS 弄潮儿们，dotCloud 公司实在是太微不足道了
当dotCloud公司快被时代抛弃的时候，决定将自己的容器产品docker开源，这个决定在当时根本没人在乎
“容器”这个概念从来就不是什么新鲜的东西，也不是 Docker 公司发明的。即使在当时最热门的 PaaS 项目 Cloud Foundry 中，容器也只是其最底层、最没人关注的那一部分
由于 PaaS厂商需要部署不同用户的多个程序，需要在一个虚拟机上启动很多个来自不同用户的应用，Cloud Foundry 会调用操作系统的 Cgroups 和 Namespace 机制为每一个应用单独创建一个称作“沙盒”的隔离环境，然后在“沙盒”中启动这些应用进程。这样，就实现了把多个用户的应用互不干涉地在虚拟机里批量地、自动地运行起来的目的
docker崛起 Docker 实际上只是一个同样使用 Cgroups 和 Namespace 实现的“沙盒”而已
然而，短短几个月，Docker 项目就迅速崛起了。它的崛起速度如此之快，以至于 Cloud Foundry 以及所有的 PaaS 社区还没来得及成为它的竞争对手，就直接被宣告出局了
Docker 项目确实与 Cloud Foundry 的容器在大部分功能和实现原理上都是一样的，可偏偏就是这剩下的一小部分不一样的功能，成了 Docker 项目接下来“呼风唤雨”的不二法宝： Docker 镜像
Docker 镜像解决的，恰恰就是PaaS平台打包部署困难的这个根本性的问题
一旦镜像制作完成，用户就可以让 Docker 创建一个“沙盒”来解压这个镜像，然后在“沙盒”中运行自己的应用</description></item></channel></rss>