<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>TCP - 标签 - lyer's blog</title><link>/tags/tcp/</link><description>TCP - 标签 - lyer's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>icepan@aliyun.com (lyer)</managingEditor><webMaster>icepan@aliyun.com (lyer)</webMaster><lastBuildDate>Sun, 25 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/tcp/" rel="self" type="application/rss+xml"/><item><title>为什么DNS使用UDP?</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88dns%E4%BD%BF%E7%94%A8udp/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88dns%E4%BD%BF%E7%94%A8udp/</guid><description>DNS协议 在讲解为什么之前我们先来讲解什么是DNS协议，以及DNS协议的一些细节
DNS协议的作用就是建立 域名和IP地址的映射，因为IP地址太长并且没有语义所以需要给IP一个域名，DNS协议的作用就是将域名转化为IP地址，这就是DNS协议的主要功能，当然还有其他功能比如记录CNAME、IP地址负载均衡等
浏览器在请求一个网址之前需要通过DNS协议获取到这个网址的IP地址这样才可以进行网络通讯建立TCP连接，因为网络中都是以IP地址来识别一个主机的
那么浏览器向谁请求DNS协议呢？这就是DNS服务器的功劳
DNS服务器是专门用来记录域名以及IP地址的映射的一个服务器，其他计算机可以通过DNS协议来请求DNS服务器来查询他所需要的信息，这些信息也是通过DNS协议返回回去的，主机只需要依照DNS协议的规范规则进行请求并且解析响应即可获取信息
DNS服务器主要会记录域名的如下几种记录:
类型 解释 A IP地址记录Address 记录域名对应的IP AAAA IPV6的地址记录 NS DNS服务器记录（Name Server），返回记录此服务器的DNS服务器域名 CNAME 规范名称记录（Canonical Name），返回另一个域名，即当前查询的域名是另一个域名的跳转 SRV 用于服务发现和负载均衡 下面来看一个DNS查询icepan.cloud的完整过程:
dig -t A icepan.cloud +trace .是根DNS服务器，查询会先根据缓存在本地的根域名服务器的NS记录和A记录去查询到权威域名服务器对应的A记录和NS记录
下面是13组根域名服务器对应的NS记录
. 7117 IN NS g.root-servers.net. . 7117 IN NS l.root-servers.net. . 7117 IN NS d.root-servers.net. . 7117 IN NS b.root-servers.net. . 7117 IN NS h.</description></item><item><title>为什么TCP会产生粘包问题?</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E4%BC%9A%E4%BA%A7%E7%94%9F%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E4%BC%9A%E4%BA%A7%E7%94%9F%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98/</guid><description>概述 粘包 就是指应用层的多条消息被合并为一个TCP包了，这个其实在发送端和接收端都会产生
还有一种现象叫拆包，指的是应用层数据被拆分为多个TCP包了
​
发送端 正常的情况
每个应用层数据都会被封装为一个TCP包然后发送
两个包粘在一起的情况
如果应用层传递下来的数据太少那么TCP协议会等待更多的数据再发送，这样可以提高传输效率，防止大头儿子的情况
粘包和拆包一起的情况
如果应用层数据太大超过了TCP协议的MSS大小，则会发生拆包
​
接收端 接收端如果来不及处理数据，那么多个到达的TCP包都会加入缓存队列，此时也会发生粘包现象
​
为什么UDP不会产生粘包问题 因为TCP是面相流的，不认为应用层的消息是一条一条的，只是将应用层传递下来的数据看成一个数据流，没头没尾
而UDP则是基于报文的，将应用层的数据看成是一个完整的数据包，所以不会进行拆分和合并，不管应用层传递下来多大多小的数据都只会封装为一个UDP包进行传输，接收端也一样会将接受到的UDP报文完整的交付给应用层
​
参考 TCP粘包拆包及解决方法
什么是TCP粘包？怎么解决这个问题</description></item><item><title>为什么TCP是面相字节流的?</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E6%98%AF%E9%9D%A2%E7%9B%B8%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E6%98%AF%E9%9D%A2%E7%9B%B8%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84/</guid><description>TCP和UDP的区别 其实这个标题可以改为 【TCP和UDP的区别】
我们知道TCP只能进行一对一的传输，而UDP则可以进行一对一、多对多、一对多、多对一传输，主要原因就是TCP会建立虚拟通道建立一个连接来保证数据包的可靠传输，数据包丢了必须进行重传
UDP就不需要保证可靠传输，只要把数据封装为UDP报文填上目标的IP+端口发送出去就行，其它的都交给网络了，不管到没到。
所以一个主机可以发送UDP包给任何的主机而不需要提前建立连接，如果目标主机有监听这个端口那么就可以接收到数据，没有监听则会把这个包丢掉
同理一个主机也可以接受来自任意主机的UDP报文，只需要监听着端口等待数据即可
所以UDP报文其实只是相当于给IP报文加上了个IP+端口而已，继承了IP包、以太网数据帧的特性，不管网络拥塞不拥塞只要应用层有数据就发送，而TCP报文就复杂了，需要记录各个信息，这些信息都是一些维护连接，控制流量的一些信息
TCP是面相字节流的，而UDP是面相报文的
这句话估计已经耳熟能详倒背如流的，那么什么是面向字节流呢？什么是面相报文呢？
​
什么是面相字节流 字节流可以理解为水流，TCP连接会建立一个虚拟通道(其实就是双方维护连接的数据结构，发到哪了收到哪了下面该发那段数据了)，建立通道之后这样就只能一对一的进行可靠传输了，TCP会将应用层的数据看成是一个无结构的字节流数据，简单来说就是没头没尾
如果应用层传递下来的数据太少则TCP可以等一等，积累一些数据再封装为一个TCP包发送，这样就提高传输的效率，因为如果数据大小都比TCP报文头的数据还小这样传输数据的效率是不划算的，这样将就会将应用层传递下来的多个数据合并为一个TCP包进行传输
如果应用层传递下来的数据太多，那么TCP就会拆分为多个TCP报文进行传输，因为TCP报文有一个MSS规定了报文的最大大小 ，这个值和以太网的MTU大小有关，如果一个TCP报文不规定合适的MSS 那么可能会被拆分为多个IP包进行传输，这个就会增加IP包拆分和组装的消耗，所以MSS应该和MTU大小接近不能超过这个值
每次发送的数据包大小都是不一致的，这个和网络状况以及对方的数据接受能力有关，也就是滑动窗口和拥塞控制窗口
​
什么是面相报文 UDP是面相报文的，UDP将应用层数据看作是一个有头有尾的完整的数据包，
也就是说不管应用层传递下来多少数据，多大的数据，UDP都会封装为一个完整的数据包发送出去
接收端也不管接受到了多大多小的UDP数据包都不会进行拆分和组装，而是完整的将UDP报文数据上交给应用层
​
总结 总的来说，TCP是以一次连接的建立和断开为单位进行传输数据的，在连接还没有断开之前一直可以往这个通道里传输数据流，并且不知道这个连接什么时候断开，只有当应用层通知连接可以关闭即开始4次握手断开连接，连接建立代表数据开始传输，连接结束代表数据传输完毕，所以说TCP是面相字节流
UDP则以一次数据包的发送接受为单位，只要应用层传递下来数据，UDP就封装为一个完整的UDP数据包发送出去，此时就可以表示此次的发送已经完成，后面的发送都是独立和无关的都代表着一次UDP连接发送</description></item><item><title>为什么TCP需要3次握手</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E9%9C%80%E8%A6%813%E6%AC%A1%E6%8F%A1%E6%89%8B/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E9%9C%80%E8%A6%813%E6%AC%A1%E6%8F%A1%E6%89%8B/</guid><description>为什么TCP连接是3次握手 注意上面的初始seq号是随机生成的，对方返回的ack必须是seq+1
一般我们人和人打招呼一来一回两次即可，但是放到网络上就不能这样了，因为网络环境是比较复杂并且不稳定的
TCP进行3次握手主要为了如下几个原因:
防止重复的历史连接 建立双方都承认的稳定的TCP连接 初始化两端的seq序列号 防止重复的历史连接 A向B发送请求连接的SYN包，如果网络拥塞A一直得不到B的ACK，则A会继续发送SYN包请求连接直到超过了重试次数则放弃
如果B同意连接，则会回复A一个ACK并且A也收到了，如果只进行两次连接，那么此时就代表建立了TCP连接，然后他们进过短暂的通讯之后就断开了，此时如果之前A重试的SYN包又到达了，则B是无法判断这个是不是A之前重试的SYN包，以为A还需要继续建立连接，那么B就会回复一个ACK又建立连接，这样就会出现很多不符合预期的连接于是TCP需要三次握手，在B发送ACK的时候还需要等待A的应答ACK，如果A收到了B的ACK并且判断出这是之前重试的SYN包(因为A有足够的上下文来判断，而B没有)，于是A就不会同意建立连接，发送RST包来终止这次请求，告诉B不需要进行重试了
防止建立错误的连接 如果进行两次握手就建立连接，这种连接是不可靠的
A发送SYN包给B，B此时需要回复一个ACK，如果只进行两次握手的话，那么此时B就认为和A建立了连接，但是有下面两种情况会产生错误:
B的ACK丢了 但是如果B回复的ACK丢了，那么A没有收到B的ACK则以为B不想建立连接于是就一直重试直到超过规定次数，但是B却认为已经和A建立连接了，这纯属单相思
A挂了 如果A挂了，那么B发送ACK之后却认为已经和A建立连接，这样也是不合理的
A不同意建立连接而没有回复ACK 比如A判断这个SYN包是之前过期的包，于是不同意建立连接不回复ACK，但是此时B却认为建立了连接，这样也是不合理的
所以B需要收到A的应答之应答之后才可以认为建立了连接
如果B的ACK到达了A并且A也同意建立连接那么A就会回复一个ACK给B，此时A就可以认为已经和B建立连接了，于是就可以发送数据给B或则等待B发数据
如果B一直没收到A的应答则会继续发ACK，此时A则会继续回复ACK直到B收到，如果B收到了A的ACK则可以认为建立了连接
初始化Seq号 A 要告诉 B，我这面发起的包的序号起始是从哪个号开始的，B 同样也要告诉 A，B 发起的包的序号起始是从哪个号开始的，只有三次握手才可以100%确定对方都收到了自己的seq号
seq号通常需要随机产生，如果都从1开始那么会出现问题
比如 A 连上 B 之后，发送了 1、2、3、4 这4个包，但是发送 4 的时候丢了，或者绕路了，于是重新发送
后来 A 掉线了，重新连上 B 后，序号又从 1 开始，然后发送1、2、3但是压根没想发送 4，但是上次绕路的那个 4 又回来了，发给了B，B认为，这就是下一个包，于是发生了错误
另外一个原因就是防止伪造TCP包进行攻击，seq号如果每次都固定，那么黑客能可以很容易伪造TCP包进行攻击，如果seq号是随机的那么黑客就很难直到这个包到底属于哪个范围哪一部分，这样就加大了攻击的难度
​
总结 TCP的握手其实可以一直进行下去，4、5、6、400&amp;hellip;.
但是进行再多的握手其实和3次握手的结果都是一样的，是没必要的
3次握手之后双方都刚好进行了 一收一发，这样就可以确定建立连接了
​
参考 为什么 TCP 建立连接需要三次握手</description></item><item><title>为什么TCP需要4次握手</title><link>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E9%9C%80%E8%A6%814%E6%AC%A1%E6%8F%A1%E6%89%8B/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/04/25/%E4%B8%BA%E4%BB%80%E4%B9%88tcp%E9%9C%80%E8%A6%814%E6%AC%A1%E6%8F%A1%E6%89%8B/</guid><description>为什么TCP需要4次握手 第一次: A没数据发送了则主动要求断开连接，于是A向B发送了一个FIN包
第二次: B收到A的FIN包则需要回复一个ACK表示收到了A的FIN请求，但是此时B可能还有数据需要发给A(比如之前没有收到A的ACK的数据需要重发等)，这种情况下A可以继续接受B的数据但是不会主动发送数据给B只会回复ACK，所以B发送的ack号永远都是一样的
第三次: B将剩余的数据发送完毕之后就需要发送一个FIN包给A表示”自己的数据发送完毕了，我要断开了“
第四次: 此时A必须回复这个FIN表示收到了B的断开请求，此时就进入 TIME_WAIT 状态等待一段时间才会断开，B如果收到了A的ACK则断开连接，如果没收到则还会继续发送FIN请求，此刻因为A还处于 TIME_WAIT 状态则会继续回复ACK
​
为什么需要 TIME_WAIT 回复B最后一个FIN包 重发ACK包 接受之前还遗留在网络上的数据包 ​
参考 https://www.bilibili.com/video/BV1x441177hF?from=search&amp;amp;seid=3231512348930851320</description></item><item><title>TCP协议</title><link>/2021/03/11/tcp%E5%8D%8F%E8%AE%AE/</link><pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/11/tcp%E5%8D%8F%E8%AE%AE/</guid><description>TCP协议 面向连接、可靠的字节流传输协议 全双工 可相互传递字节流 只可用于 一对一通信 ，不能用于多播和组播 TCP 使用校验和，确认和重传机制来保证可靠传输 TCP 使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制 TCP使用 (源地址，源端口，目的地址，目的端口)来标识一个连接 ​
TCP报文 源端口和目的端口 端口大小为16位，可见端口范围为:0~2^16 也就是[0~65536]
IP层则用ip地址来标识一台主机，TCP层用端口来标识一个应用，使用(源地址，源端口，目的地址，目的端口)唯一确定一个连接，所以对于IPV4的话单台主机最大的连接数为 2^(32+16+32+16) 个
序号 每个TCP包都有一个序号，编号是为了解决TCP包乱序问题，给每个包编上序号就知道了每个包的顺序，这样就可以完整的拼好所有的TCP包了而不造成乱序，TCP给个字节都有一个序号，序号是整个TCP包数据段的第一个字节的序号，比如现在一个包的起始序号为101，数据长度为500byte ，那么最后一个字节的序号就为600，这个TCP包的序号为第一个字节的序号101 ，所以下一个TCP包的第一个字节的序号应该为601，也就是下一个TCP包的序号为601
如果序号达到最大值2^32，则回卷到0
由于初始的seq号是随机生成的，所以TCP回绕到0之后怎么继续保持字节序呢?怎么判断字节序呢?
回绕之后遇到相同的seq号则可以根据TCP头部携带的时间戳来判断前后
确认号 设置TCP包的确认号是为了告诉对方上一个数据包已经确认收到了，你可以继续发送下一个TCP包了，这个确认号填的就是期望对方发送的下一个TCP包的 序号
比如B收到了A发的序号为101的TCP包，该包长度为500byte，B现在收到了A发的600byte之前的数据，期望A发送下一个序号为601的TCP包，所以确认号为601
A收到B的回复的确认号为601得知B已经收到了A发的600byte之前的数据，现在要发下一个序号为601的TCP包了
首部长度 长度为4位
指出TCP首部的大小，因为TCB首部中有可选择字段，所以每个TCB首部都是不定长的，所以需要指定首部长度，单位是4字节 ，最大为2^4 ，所以首部最大长度为16*4byte=60byte
保留位 6位，保留以后使用，目前全部置0
五大标志位 6位
标志 含义 URG 紧急位，为1的话则表示这是个紧急的TCP包，应该放到发送队列的最前面去立即发送 ACK ACK=1表示确认号有效，ACK=0表示确认号无效，TCP连接建立成功后所有的传输报文必须把ACK置为1 PSH 很少用到，一般为0 RST 复位 RST=1 表示TCP连接出错，必须释放连接重新建立 SYN 同步 SYN=1表示这是一个请求建立连接或接受建立连接请求报文 SYN=1 ACK=0表示这是一个建立连接请求，SYN=1 ACK=1表示这是一个应答建立连接请求的TCP报文，详情请参考TCP三次握手 FIN 用来释放连接， FIN=1 表示数据已经发送完毕并且请求释放TCP连接 窗口大小 TCP使用 滑动窗口 来实现拥塞控制和流量控制，详情请见下文，比如B响应给A的报文中窗口字段的大小为1000 ，确认号为101 目的就是为了告诉A可以发送101开始的数据包了，缓存空间大小为1000byte，也就是还可以接受101~1101字节范围的数据包</description></item><item><title>网络分层和协议栈总览</title><link>/2021/03/05/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E5%92%8C%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%80%BB%E8%A7%88/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>/2021/03/05/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E5%92%8C%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%80%BB%E8%A7%88/</guid><description>OSI七层模型和TCP/IP五层模型 ​
为什么网络要分层 复杂的计算机程序都需要通过分层来设计，这是一种设计模式，通过分层每层各司其职，每层都可以独立升级和维护
​
TCP/IP协议栈 1、应用层 协议 全名 功能 基于/端口 HTTP Hypertext Transfer Protocol web TCP/80 HTTPS Hypertext Transfer Protocol Secure 加密的HTTP SSL/TSL/443 SSL/TSL Secure Socket Layer/Transport Layer Security 加密协议 FTP File Transfer Protocol 传输文件 TCP/21(控制)/20(数据传输) SSH Secure Shell 连接远程Linux主机 TCP/22 SFTP SSH File Transfer Protocol SSH加密的FTP SSH/22 DNS Domain Name System IP和域名的解析转化 UDP/TCP/53 SMTP Simple Mail Transfer Protocol 邮件收发 TCP/25 POP3 Post Office Protocol-Version 3 收邮件 TCP/110 RPC Remote Procedure Call 调用远程的函数 TCP/随机 DHCP Dynamic Host Configuration Protocol 在局域网中动态分配IP UDP/67(接收)/68(请求) 2、传输层 协议 全名 功能 TCP Transmission Control Protoco 可靠的传递网络数据包 QUIC Quick UDP Internet Connections Google研发的基于UDP的传输层协议，用于替换TCP 2、网络层 协议 全名 功能 IP Internet Protocol 广域网传递数据包 ARP Address Resolution Protocol 根据IP获取MAC ICMP Internet Control Message Protocol 传递网络控制信息，需要加上IP报头组成IP数据报发送 ​</description></item></channel></rss>